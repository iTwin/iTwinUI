// Copyright (c) Bentley Systems, Incorporated. All rights reserved.
// See LICENSE.md in the project root for license terms and full copyright notice.
@use '../mixins';

/// Cursor styling for the label.
@mixin iui-input-label-cursor {
  cursor: default;

  &:is(label) {
    cursor: pointer;

    &[data-iui-disabled='true'] {
      cursor: not-allowed;
    }
  }
}

/// Text label for an input.
/// Supports .iui-required modifier to show red asterisk.
@mixin iui-input-label-styling {
  font-weight: var(--iui-font-weight-semibold);
  color: var(--_iui-input-label-color);

  &.iui-required {
    &::after {
      content: '*';
      margin-inline-start: var(--iui-size-2xs);
      color: var(--iui-color-text-negative);
    }
  }

  &[data-iui-disabled='true'] {
    --_iui-input-label-color: var(--iui-color-text-disabled);
  }
}

/// Modifier on iui-input-label-styling to place it inline.
@mixin iui-input-label-inline {
  margin: 0 var(--iui-size-m) 0 0;

  &.iui-required {
    margin-inline-end: calc(var(--iui-size-2xs) * 1.5 - 1px);
  }
}

/// Label inside the input-container grid.
@mixin iui-input-container-label {
  @include iui-input-label-styling;
  grid-area: label;
  align-self: center;
  cursor: pointer;
}

/// Independent label outside the grid.
/// Supports .iui-inline modifier to place it inline.
@mixin iui-input-label {
  @include iui-input-label-styling;
  @include iui-input-label-cursor;
  display: block;

  &.iui-inline {
    @include iui-input-label-inline;
    display: inline-flex;
    align-items: center;
  }
}

/// Icon to be shown near a message.
@mixin iui-input-icon {
  @include mixins.iui-icon-style('m');
  grid-area: icon;
  align-self: center;

  &:not(:last-child) {
    margin-inline-end: var(--iui-size-2xs);
  }

  svg:where(:not(.iui-button svg)) {
    @include mixins.iui-icon-color;
  }
}

/// Modifier on iui-input-icon to place it at the end of input.
@mixin iui-input-icon-inline {
  $margin-end: calc(var(--iui-size-xs) + 1px);

  grid-area: inputs;
  justify-self: end;
  margin: 0 #{$margin-end} 0 0;
  position: relative;
  block-size: 100%;
  inline-size: fit-content;
  display: inline-flex;
  align-items: center;

  svg:where(:not(.iui-button svg)) {
    @include mixins.iui-icon-style('m');
  }

  &,
  .iui-button {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
    border-start-end-radius: inherit;
    border-end-end-radius: inherit;
  }

  .iui-button {
    margin-inline-end: calc(-1 * $margin-end);
  }

  &.iui-actionable {
    align-items: center;
    block-size: calc(100% - 4px); // subtract 2px on both sides to avoid overlapping with border/outline
    margin-inline-end: 2px; // shift 2px from the right to avoid overlapping with border/outline
    border-radius: var(--iui-border-radius-1);
    padding-inline: calc(var(--iui-size-xs) + 1px);
    cursor: pointer;
    box-sizing: content-box;

    @include mixins.iui-ripple(var(--iui-color-background), var(--iui-color-background-backdrop));

    svg:where(:not(.iui-button svg)) {
      fill: var(--iui-color-icon);
      transition: transform var(--iui-duration-1) ease-out;
    }

    &.iui-open svg {
      transform: rotate(180deg); // transform for arrow icon (e.g. svg-caret-down), used in combobox
    }
  }

  &.iui-disabled {
    cursor: not-allowed;

    svg {
      fill: var(--iui-color-icon-disabled);
    }
  }
}

/// Mixin for applying status colors to input container.
/// @arg status - must be one of: positive, negative, warning
/// @arg iconSelector - selector to apply status fill on. Defaults to .iui-input-icon svg
/// @arg textSelector - selector to apply text color on. Defaults to .iui-message
@mixin iui-input-status($status, $iconSelector: '.iui-input-icon svg', $textSelector: '.iui-message') {
  @include mixins.iui-text-selection($status);

  #{$iconSelector} {
    fill: var(--iui-color-icon-#{$status});
  }

  #{$textSelector} {
    color: var(--iui-color-text-#{$status});

    a {
      text-decoration: underline;
      color: var(--iui-color-text-#{$status});

      &:hover {
        text-decoration: none;
        color: var(--iui-color-text-#{$status}-hover);
      }
    }
  }

  .iui-input {
    // #region Bottom padding to accomodate for status stripe
    padding-block-end: calc(var(--iui-size-2xs) - 1px);

    &[data-iui-size='small'] {
      padding-block-end: 0;
    }

    &[data-iui-size='large'] {
      padding-block-end: calc(var(--iui-size-xs) - 1px);
    }
    // #endregion

    border-block-end: var(--iui-size-3xs) solid var(--iui-color-border-#{$status});

    &:focus {
      border-block-end: var(--iui-size-3xs) solid var(--iui-color-border-#{$status});
      outline: 2px solid var(--iui-color-text-#{$status});
      outline-offset: -2px;
    }

    &:hover {
      --_iui-input-border-color: var(--iui-color-border-#{$status});
    }
  }

  .iui-input-with-icon {
    --_iui-input-with-icon-hover-border-color: var(--iui-color-border-#{$status});
    --_focus-color: var(--iui-color-text-#{$status});
  }

  .iui-select-button {
    border-block-end: transparent;

    &::after {
      content: '';
      inline-size: 100%;
      position: absolute;
      inset-block-end: 0;
      inset-inline-start: 0;
      block-size: var(--iui-size-3xs);
      background-color: var(--iui-color-border-#{$status});
    }
  }
}
