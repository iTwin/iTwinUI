// Copyright (c) Bentley Systems, Incorporated. All rights reserved.
// See LICENSE.md in the project root for license terms and full copyright notice.
@use './mixins' as *;
@use '../mixins' as *;

.iui-input-container {
  @include iui-input-grid;

  @each $status in positive, warning, negative {
    &[data-iui-status='#{$status}'] {
      @include iui-input-status($status: $status);
    }
  }
}

.iui-input-grid {
  @include iui-input-grid;
}

.iui-input-label {
  @include iui-input-label;
}

// ----------------------------------------------------------------------------

.iui-input-flex-container {
  --_iui-input-background-color: var(--iui-color-background);
  --_iui-input-border-color: var(--iui-color-border-foreground);
  --_iui-input-accent-border-color: var(--iui-color-border-accent);
  --_iui-input-text-color: var(--iui-color-text);
  --_iui-input-padding-block: var(--iui-size-2xs);
  --_iui-input-min-height: var(--iui-component-height);

  display: inline-flex;
  align-items: center;
  background-color: var(--_iui-input-background-color);
  border-radius: var(--iui-border-radius-1);
  color: var(--_iui-input-text-color);
  position: relative;
  block-size: var(--_iui-input-min-height);
  inline-size: 100%;
  isolation: isolate;
  min-block-size: var(--_iui-input-min-height);
  block-size: fit-content;

  // Adding before pseudo-element to make inner elements more centered
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    border: 1px solid var(--_iui-input-border-color);
    border-radius: var(--iui-border-radius-1);
    transition: border-color var(--iui-duration-1) ease-out;
  }

  &:hover {
    --_iui-input-border-color: var(--iui-color-border-foreground-hover);
  }

  &:has(input:focus-visible),
  &:has(textarea:focus-visible) {
    outline: 2px solid var(--_iui-input-accent-border-color);
    outline-offset: -2px;

    // Added to make sure border color is not visible with outline
    &::before {
      border-color: transparent;
    }
  }

  @supports not selector(:has(+ *)) {
    &:where(:focus-within) {
      outline: 2px solid var(--_iui-input-accent-border-color);
      outline-offset: -2px;

      // Added to make sure border color is not visible with outline
      &::before {
        border-color: transparent;
      }
    }
  }

  input,
  textarea {
    all: unset;
    z-index: 2;
    min-inline-size: var(--_iui-input-min-height);
    flex: 999;
    padding-inline-start: var(--iui-size-s);

    &:is(:not(:first-child)) {
      padding-inline-start: var(--iui-size-2xs);
    }
  }

  textarea {
    padding-block: var(--_iui-input-padding-block);
  }

  &[data-iui-disabled='true'] {
    --_iui-input-background-color: var(--iui-color-background-disabled);
    --_iui-input-border-color: var(--iui-color-border-disabled);
    --_iui-input-with-icon-hover-border-color: var(--iui-color-border-disabled);
    cursor: not-allowed;
  }

  &[data-iui-size='small'] {
    --_iui-input-padding-block: 0;
    --_iui-input-min-height: var(--iui-component-height-small);
  }

  &[data-iui-size='large'] {
    --_iui-input-padding-block: var(--iui-size-xs);
    --_iui-input-min-height: var(--iui-component-height-large);
    font-size: var(--iui-font-size-2);
  }

  @each $status in positive, warning, negative {
    &[data-iui-status='#{$status}'] {
      --_iui-input-accent-border-color: var(--iui-color-border-#{$status});

      &::before {
        border-block-end-width: var(--iui-size-3xs);
        border-block-end-color: var(--_iui-input-accent-border-color);
      }

      &:hover {
        --_iui-input-border-color: var(--iui-color-border-#{$status});
      }
    }
  }
}

.iui-input-decorator-icon {
  margin: 0 var(--iui-size-s);

  &.iui-actionable {
    align-items: center;
    block-size: calc(100% - 4px); // subtract 2px on both sides to avoid overlapping with border/outline
    margin-inline-end: 2px; // shift 2px from the right to avoid overlapping with border/outline
    border-radius: var(--iui-border-radius-1);
    padding-inline: calc(var(--iui-size-xs) + 1px);
    cursor: pointer;
    box-sizing: content-box;

    @include iui-ripple(var(--iui-color-background), var(--iui-color-background-backdrop));

    svg {
      fill: var(--iui-color-icon);
      transition: transform var(--iui-duration-1) ease-out;
    }

    &.iui-open svg {
      transform: rotate(180deg); // transform for arrow icon (e.g. svg-caret-down), used in combobox
    }
  }
}

.iui-input-group-wrapper {
  &[data-iui-label-placement='inline'] {
    display: flex;
    flex-direction: row;

    .iui-status-message {
      margin-inline-start: var(--iui-size-m);
    }
  }
}

.iui-input-group {
  display: flex;
  flex-direction: column;

  .iui-toggle-switch-wrapper {
    padding: calc(var(--iui-size-s) * 0.5) 0;
  }

  .iui-radio-wrapper {
    min-block-size: var(--iui-size-l);
  }
}

// attribute to include status border in inputs (input, select)
.iui-input,
.iui-input-with-icon > .iui-select-button {
  @each $statusColor in informational, positive, warning, negative {
    &:where([data-iui-status='#{$statusColor}']) {
      padding-block-end: calc(var(--iui-size-2xs) - 1px);

      &[data-iui-size='small'] {
        padding-block-end: 0;
      }

      &[data-iui-size='large'] {
        padding-block-end: calc(var(--iui-size-xs) - 1px);
      }
      // #endregion

      border-block-end: var(--iui-size-3xs) solid var(--iui-color-border-#{$statusColor});

      &:focus {
        border-block-end: var(--iui-size-3xs) solid var(--iui-color-border-#{$statusColor});
        outline: 2px solid var(--iui-color-text-#{$statusColor});
        outline-offset: -2px;
      }

      &:hover {
        --_iui-input-border-color: var(--iui-color-border-#{$statusColor});
        --_iui-input-with-icon-hover-border-color: var(--iui-color-border-#{$statusColor});
      }
    }
  }
}
