// Copyright (c) Bentley Systems, Incorporated. All rights reserved.
// See LICENSE.md in the project root for license terms and full copyright notice.

/// Mixin for button group or input+button combo group.
/// @arg $orientation must be one of: horizontal, vertical
/// Note: Vertical button-group should be used for icon buttons only.
@mixin iui-button-group($orientation: horizontal) {
  display: inline-flex;
  align-items: center;
  isolation: isolate;
  pointer-events: none;

  @if $orientation != 'horizontal' {
    flex-direction: column;
    max-height: 100%;
  }

  $childZindexSelector: '.iui-input-container, .iui-button, .iui-input:where(:not(.iui-input-container .iui-input))';
  $childBorderSelector: '.iui-input, .iui-button:where(:not([data-iui-variant="borderless"]))';
  $disabledSelector: '&:disabled, &.iui-disabled, &[aria-disabled="true"]';

  > * {
    display: flex;

    > * {
      pointer-events: all;
    }

    #{$childZindexSelector} {
      position: relative;

      // Adds stripe to active button
      @if $orientation == 'horizontal' {
        --_iui-button-active-stripe-inset: #{var(--iui-size-3xs)}
          #{var(--iui-size-3xs)}
          calc(100% - #{var(--iui-size-2xs)});
      } @else {
        --_iui-button-active-stripe-inset: #{var(--iui-size-3xs)}
          calc(100% - #{var(--iui-size-2xs)})
          #{var(--iui-size-3xs)}
          #{var(--iui-size-3xs)};
      }

      &:hover {
        z-index: 1;
      }

      #{$disabledSelector} {
        z-index: -1;
      }

      &:focus,
      &:focus-within {
        &,
        &:where([aria-disabled='true']) {
          z-index: 2;
        }
      }
    }

    #{$childBorderSelector} {
      // Reset border radius
      border-radius: 0;

      transition-duration: 0ms; // disable exit animation to avoid border flicker

      &:hover,
      &:focus {
        transition-duration: var(--iui-duration-1); // re-enable enter animation
      }
    }

    // Add rounded corners to first and last items
    &:first-child {
      #{$childBorderSelector} {
        border-top-left-radius: var(--iui-border-radius-1);

        @if $orientation == 'horizontal' {
          border-bottom-left-radius: var(--iui-border-radius-1);
        } @else {
          border-top-right-radius: var(--iui-border-radius-1);
        }
      }
    }

    &:last-child {
      #{$childBorderSelector} {
        border-bottom-right-radius: var(--iui-border-radius-1);

        @if $orientation == 'horizontal' {
          border-top-right-radius: var(--iui-border-radius-1);
        } @else {
          border-bottom-left-radius: var(--iui-border-radius-1);
        }
      }
    }

    // Use negative margin to make adjacent borders overlap
    + * {
      @if $orientation == 'horizontal' {
        margin-left: -1px;
      } @else {
        margin-top: -1px;
      }
    }

    // Add slight border between disabled items
    &:not(:first-child) :not([data-iui-variant='borderless']) {
      #{$disabledSelector} {
        @if $orientation == 'horizontal' {
          border-left-color: var(--iui-color-background-4);
        } @else {
          border-top-color: var(--iui-color-background-4);
        }
      }
    }
  }
}

@mixin iui-button-group-overflow-x {
  width: 100%;
}
