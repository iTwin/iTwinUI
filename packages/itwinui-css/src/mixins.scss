// Copyright (c) Bentley Systems, Incorporated. All rights reserved.
// See LICENSE.md in the project root for license terms and full copyright notice.
@use 'sass:map';

@mixin focus-visible {
  &:focus-visible {
    @content;
  }

  @supports #{'not selector(*:focus-visible)'} {
    &:focus {
      @content;
    }
  }
}

@mixin iui-focus($color: var(--iui-color-border-accent), $offset: -1px, $thickness: 1px) {
  @include focus-visible {
    outline: $thickness solid $color;
    outline-offset: $offset;
  }
}

@mixin iui-reset {
  margin: 0;
  padding: 0;
  border: none;
  vertical-align: baseline;
}

@mixin iui-text-selection($status: accent) {
  &::selection,
  *::selection {
    background-color: hsl(var(--iui-color-#{$status}-hsl) / var(--iui-opacity-5));
  }
}

@mixin iui-scrollbar {
  scrollbar-color: hsl(var(--iui-color-foreground-hsl) / var(--iui-opacity-4)) transparent;
  scrollbar-width: thin;

  &::-webkit-scrollbar {
    width: var(--iui-size-xs);
    height: var(--iui-size-xs);
  }

  &::-webkit-scrollbar-thumb {
    background-color: hsl(var(--iui-color-foreground-hsl) / var(--iui-opacity-4));
    border-radius: var(--iui-border-radius-round);

    &:hover {
      background-color: hsl(var(--iui-color-foreground-hsl) / var(--iui-opacity-3));
    }
  }

  &::-webkit-scrollbar-track,
  &::-webkit-scrollbar-corner {
    background-color: transparent;
  }
}

@mixin iui-line-clamp($lines: 1) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box; /* stylelint-disable-line */
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical; /* stylelint-disable-line */
}

@mixin iui-blur($hsl: 0 0% 0%, $opacity: 4) {
  // Blur fallback
  background-color: Hsl($hsl / var(--iui-opacity-#{$opacity - 1}));

  // With blur
  @supports (backdrop-filter: blur(5px)) {
    background-color: Hsl($hsl / var(--iui-opacity-#{$opacity}));
    backdrop-filter: blur(5px);
  }
}

/// Classes for react-transition-group
/// Used for expand/collapse transitions. Needs height/width to be set in JS.
@mixin iui-transition-group {
  $transition-rule: opacity var(--iui-duration-1) ease-out, width var(--iui-duration-1) ease-out,
    height var(--iui-duration-1) ease-out;

  &.iui-enter {
    opacity: 0;
  }

  &.iui-enter-active {
    opacity: 1;
    @media (prefers-reduced-motion: no-preference) {
      transition: $transition-rule;
    }
  }

  &.iui-exit {
    opacity: 1;
  }

  &.iui-exit-active {
    opacity: 0;
    @media (prefers-reduced-motion: no-preference) {
      transition: $transition-rule;
    }
  }
}

/// Adds the ability to toggle vertical scroll snapping by setting `.iui-scroll-snapping` as a modifier (if used inside a class) or at root level.
/// @arg $selector - selector to apply `scroll-snap-align: start` on. Defaults to '> *'
@mixin iui-scroll-snapping($selector: '> *') {
  #{if(&, '&.iui-scroll-snapping', '.iui-scroll-snapping')} {
    scroll-snap-type: y mandatory;

    #{$selector} {
      scroll-snap-align: start none;
    }
  }
}

@mixin iui-ripple($hoverColor, $rippleColor) {
  background-position: center;
  transition: background var(--iui-duration-2) ease-out;

  &:hover {
    background: $hoverColor radial-gradient(circle, transparent 1%, #{$hoverColor} 1%) center/15000%;
  }

  &:active {
    background-color: $rippleColor;
    background-size: 100%;
    transition: background var(--iui-duration-0);
  }
}

/// Helper mixin to add ::before or ::after pseudo element that will
/// be absolutely positioned and will have the same size as the parent element.
@mixin pseudo-content($beforeOrAfter: before) {
  &::#{$beforeOrAfter} {
    content: '';
    position: absolute;
    inset: 0;
    @content;
  }
}

@mixin safari-only {
  @supports (-apple-pay-button-style: inherit) {
    @content;
  }
}

/// Visually hides an element but keeps it accessible to screen readers.
/// Because it applies some potentially invasive styles, use this mixin on a wrapper element for best results.
/// If it contains a focusable element, make sure to revert/exclude these styles.
@mixin visually-hidden {
  clip-path: inset(50%) !important;
  overflow: hidden !important;
  position: absolute !important;
  white-space: nowrap !important;
  height: 1px !important;
  width: 1px !important;
}

// setup for toggling values at runtime using the css var space toggle technique
// https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property
//
// Usage:
//
// @include space-toggle-states;
// --is-red: var(--iui-off);
// background: var(--is-red, red);
//
// // later:
// --is-red: var(--iui-on);
@mixin space-toggle-states {
  --iui-off: /* whitespace means "off" */ ; /* stylelint-disable-line */
  --iui-on: initial;
}

// ----------------------------------------------------------------------------
// helpers for icon

$iui-icon-color-multicolor-disabled: grayscale(100%);

$iui-icon-sizes: (
  // 12px
  s: var(--iui-size-s),
  // 16px
  m: var(--iui-size-m),
  // 24px
  l: calc(1.5 * var(--iui-size-m)),
  // 32px
  xl: var(--iui-size-xl),
  // 48px
  2xl: calc(3 * var(--iui-size-m)),
  // 64px
  3xl: var(--iui-size-2xl)
);

/// @arg $size Can be one of: s, m, l, xl, 2xl, 3xl
@mixin iui-icon-style($size: 'm') {
  display: flex;
  flex-shrink: 0;

  $icon-size: map.get($iui-icon-sizes, $size);
  width: $icon-size;
  height: $icon-size;
}

/// @arg $color Can be one of: default, informational, positive, warning, negative
@mixin iui-icon-color($color: 'default') {
  @if $color == 'default' {
    fill: var(--iui-color-icon-muted);
    @media (forced-colors: active) {
      fill: CanvasText;
    }
  }
  @if $color == 'informational' {
    fill: var(--iui-color-icon-informational);
  }
  @if $color == 'positive' {
    fill: var(--iui-color-icon-positive);
  }
  @if $color == 'warning' {
    fill: var(--iui-color-icon-warning);
  }
  @if $color == 'negative' {
    fill: var(--iui-color-icon-negative);
  }
}
