{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.8",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@itwin/itwinui-react!",
  "docComment": "",
  "name": "@itwin/itwinui-react",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@itwin/itwinui-react!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!ActionColumn:function(1)",
          "docComment": "/**\n * Action column that adds column manager to the Table header. It is recommended to add this column to the end of the Table and to override its `Cell` prop with your row actions menu.\n *\n * @example\n *\n * { ...ActionColumn({ columnManager: true }), Cell: () => ( <DropdownMenu menuItems={menuItems}> <IconButton styleType='borderless' onClick={(e) => e.stopPropagation()} > <SvgMore /> </IconButton> </DropdownMenu> ), },\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ActionColumn: <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ">({ columnManager, }?: "
            },
            {
              "kind": "Reference",
              "text": "ActionColumnProps",
              "canonicalReference": "@itwin/itwinui-react!~ActionColumnProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    id: string;\n    disableResizing: boolean;\n    disableGroupBy: boolean;\n    minWidth: number;\n    width: number;\n    maxWidth: number;\n    columnClassName: string;\n    cellClassName: string;\n    disableReordering: boolean;\n    Header: ({ allColumns, dispatch, state }: "
            },
            {
              "kind": "Reference",
              "text": "HeaderProps",
              "canonicalReference": "@itwin/itwinui-react!~HeaderProps_2:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/columns/actionColumn.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ columnManager, }",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ActionColumn"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Alert:var",
          "docComment": "/**\n * A small box to quickly grab user attention and communicate a brief message\n *\n * @example\n *\n * <Alert>This is an alert.</Alert>\n *\n * @example\n *\n * <Alert.Wrapper type='informational'> <Alert.Icon /> <Alert.Message>This is an informational alert.</Alert.Message> <Alert.CloseButton onClick={() => {}} /> </Alert.Wrapper>\n *\n * @example\n *\n * <Alert.Wrapper type='positive'> <Alert.Icon> <SvgSmileyHappy /> </Alert.Icon> <Alert.Message> This is an alert. <Alert.Action>This is clickable text.</Alert.Action> </Alert.Message> <Alert.CloseButton onClick={() => {}}> <SvgCollapse /> </Alert.CloseButton> </Alert.Wrapper>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Alert: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "AlertOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~AlertOwnProps:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "AlertLegacyProps",
              "canonicalReference": "@itwin/itwinui-react!~AlertLegacyProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "AlertOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~AlertOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"fill\" | \"as\" | \"key\" | \"size\" | keyof "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": "> | \"padded\"> & {\n        size?: \"auto\" | \"small\" | \"medium\" | \"large\" | import(\"../../utils/types.js\")."
            },
            {
              "kind": "Reference",
              "text": "AnyString",
              "canonicalReference": "@itwin/itwinui-react!~AnyString_2:type"
            },
            {
              "kind": "Content",
              "text": ";\n        fill?: \"default\" | \"positive\" | \"informational\" | \"negative\" | \"warning\" | import(\"../../utils/types.js\")."
            },
            {
              "kind": "Reference",
              "text": "AnyString",
              "canonicalReference": "@itwin/itwinui-react!~AnyString_2:type"
            },
            {
              "kind": "Content",
              "text": ";\n        padded?: boolean;\n    } & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"ref\"> & {\n        as?: \"span\" | undefined;\n    }>;\n    Message: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Action: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\", {}>;\n    CloseButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Alert/Alert.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Alert",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 47
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Anchor:var",
          "docComment": "/**\n * A consistently styled anchor component.\n *\n * Supports polymorphic `as` prop for use with `Link` components from routers, or to render as a button.\n *\n * @example\n *\n * <Anchor href='/'>Home</Anchor> <Anchor href='/projects'>Projects</Anchor> <Anchor href='/help' underline>Help</Anchor>\n *\n * @example\n *\n * <Anchor as={Link} to='/'>Home</Anchor> <Anchor as='button' onClick={() => {}}>click me</Anchor>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Anchor: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\", "
            },
            {
              "kind": "Reference",
              "text": "AnchorProps",
              "canonicalReference": "@itwin/itwinui-react!~AnchorProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Typography/Anchor.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Anchor",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Avatar:var",
          "docComment": "/**\n * Basic avatar component\n *\n * @example\n *\n * <caption>Small icon with abbreviation</caption> <Avatar size='small' title='Terry Rivers' abbreviation='TR' backgroundColor='green'/>\n *\n * @example\n *\n * <caption>Medium icon with image</caption> <Avatar size='medium' title='Terry Rivers' abbreviation='TR' backgroundColor='green' image={<img src=\"https://cdn.example.com/user/profile/pic.png\" />}/>\n *\n * @example\n *\n * <caption>Large icon with status</caption> <Avatar size='large' title='Terry Rivers' abbreviation='TR' backgroundColor='green' status='online' />\n *\n * @example\n *\n * <caption>X-large icon with image</caption> <Avatar size='x-large' title='Terry Rivers' abbreviation='TR' backgroundColor='green' image={<img src=\"https://cdn.example.com/user/profile/pic.png\" />}/>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Avatar: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "AvatarProps",
              "canonicalReference": "@itwin/itwinui-react!~AvatarProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Avatar/Avatar.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Avatar",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!AvatarGroup:var",
          "docComment": "/**\n * Group Avatars together.\n *\n * Avatars stacking is based on `maxAvatars` count. If you provide 8 Avatars and keep default 5 `maxAvatars` count, this component will show 5 Avatars and Count Avatar with \"3\" in it.\n *\n * You can add custom Count Avatar behavior by using `countAvatarProps`.\n *\n * @example\n *\n * <AvatarGroup iconSize='medium'> <Avatar abbreviation=\"TR\" backgroundColor={getUserColor(\"Terry Rivers\")} title=\"Terry Rivers\" /> <Avatar abbreviation=\"RM\" backgroundColor={getUserColor(\"Robin Mercer\")} title=\"Robin Mercer\" /> <Avatar abbreviation=\"JM\" backgroundColor={getUserColor(\"Jean Mullins\")} title=\"Jean Mullins\" /> </AvatarGroup>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AvatarGroup: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "AvatarGroupProps",
              "canonicalReference": "@itwin/itwinui-react!~AvatarGroupProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/AvatarGroup/AvatarGroup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AvatarGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Backdrop:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Backdrop: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "BackdropProps",
              "canonicalReference": "@itwin/itwinui-react!~BackdropProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Backdrop/Backdrop.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Backdrop",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Badge:var",
          "docComment": "/**\n * A colorful visual indicator for categorizing items.\n *\n * @example\n *\n * <Badge>Label</Badge> <Badge backgroundColor=\"sunglow\">Label</Badge> <Badge backgroundColor=\"positive\">Label</Badge>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Badge: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "BadgeProps",
              "canonicalReference": "@itwin/itwinui-react!~BadgeProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Badge/Badge.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Badge",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!BaseFilter:var",
          "docComment": "/**\n * Filter wrapper that should be used when creating custom filters.\n *\n * @example\n *\n * <BaseFilter> <Input value={text} onChange={(e) => setText(e.target.value)} /> <FilterButtonBar setFilter={() => setFilter(text)} clearFilter={clearFilter} /> </BaseFilter>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BaseFilter: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"form\">"
            }
          ],
          "fileUrlPath": "esm/core/Table/filters/BaseFilter.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "BaseFilter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Blockquote:var",
          "docComment": "/**\n * Basic blockquote component\n *\n * @example\n *\n * <Blockquote>This is a quote</Blockquote> <Blockquote footer='— Someone'> <p>This is a quote from someone</p> </Blockquote>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Blockquote: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"blockquote\", "
            },
            {
              "kind": "Reference",
              "text": "BlockquoteProps",
              "canonicalReference": "@itwin/itwinui-react!~BlockquoteProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Typography/Blockquote.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Blockquote",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Breadcrumbs:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Breadcrumbs: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"nav\", "
            },
            {
              "kind": "Reference",
              "text": "BreadcrumbsProps",
              "canonicalReference": "@itwin/itwinui-react!~BreadcrumbsProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Item: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Breadcrumbs/Breadcrumbs.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Breadcrumbs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Button:var",
          "docComment": "/**\n * Generic button component\n *\n * @example\n *\n * <Button>This is a default button</Button> <Button disabled={true}>This is a disabled button</Button> <Button size='large' styleType='high-visibility'>This is a large high visibility button</Button> <Button size='small' styleType='cta'>This is a small call to action button</Button> <Button startIcon={<SvgAdd />}>New</Button>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Button: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "ButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~ButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Buttons/Button.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Button",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ButtonGroup:var",
          "docComment": "/**\n * Group buttons together for common actions. Handles responsive overflow when the `overflowButton` prop is specified.\n *\n * @example\n *\n * <ButtonGroup role=\"toolbar\"> <IconButton> <SvgAdd /> </IconButton> <IconButton> <SvgEdit /> </IconButton> </ButtonGroup>\n *\n * @example\n *\n * const buttons = [...Array(10)].map((_, index) => <IconButton><SvgPlaceholder /></IconButton>); <ButtonGroup overflowButton={(overflowStart) => <DropdownMenu menuItems={(close) => [...Array(buttons.length - overflowStart + 1)].map((_, index) => ( <MenuItem icon={<SvgPlaceholder />} onClick={close}>Button #{overflowStart + index}</MenuItem> )) }> <IconButton><SvgMore /></IconButton> </DropdownMenu>} > {buttons} </ButtonGroup>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ButtonGroup: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ButtonGroupProps",
              "canonicalReference": "@itwin/itwinui-react!~ButtonGroupProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ButtonGroup/ButtonGroup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ButtonGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Carousel:var",
          "docComment": "/**\n * The Carousel component consists of a set of slides, normally displayed one at a time. A navigation section is shown below the slides, consisting of \"dots\" and \"previous\"/\"next\" buttons, used for changing slides; this navigation section must be present _before_ the slides in DOM order, even though it is visually shown below the slides.\n *\n * The currently shown slide can also be changed using the left/right arrow keys or by dragging on a touch device.\n *\n * This component uses a composition approach so it should be used with the provided subcomponents.\n *\n * @example\n *\n * <Carousel> <Carousel.Navigation /> <Carousel.Slider> <Carousel.Slide>...</Carousel.Slide> <Carousel.Slide>...</Carousel.Slide> <Carousel.Slide>...</Carousel.Slide> </Carousel.Slider> </Carousel>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Carousel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"section\", "
            },
            {
              "kind": "Reference",
              "text": "CarouselProps",
              "canonicalReference": "@itwin/itwinui-react!~CarouselProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Slider: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Slide: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {\n        index?: number;\n    }>;\n    Navigation: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}> & {\n        PreviousButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ButtonHTMLAttributes",
              "canonicalReference": "@types/react!React.ButtonHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"label\" | \"title\" | \"as\" | \"size\" | \"htmlDisabled\" | \"styleType\" | \"labelProps\" | \"stretched\" | \"isActive\" | \"iconProps\"> & {\n            isActive?: boolean;\n            label?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n            labelProps?: "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ComponentPropsWithoutRef",
              "canonicalReference": "@types/react!React.ComponentPropsWithoutRef:type"
            },
            {
              "kind": "Content",
              "text": "<typeof import(\"../Tooltip/Tooltip.js\")."
            },
            {
              "kind": "Reference",
              "text": "Tooltip",
              "canonicalReference": "@itwin/itwinui-react!Tooltip"
            },
            {
              "kind": "Content",
              "text": ">, \"content\" | \"reference\" | \"ariaStrategy\" | \"children\">;\n            iconProps?: "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentProps",
              "canonicalReference": "@types/react!React.ComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "<\"span\">;\n            title?: string;\n        } & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"../Buttons/Button.js\")."
            },
            {
              "kind": "Reference",
              "text": "ButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~ButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"loading\" | \"startIcon\" | \"endIcon\" | \"labelProps\" | \"startIconProps\" | \"endIconProps\"> & {\n            as?: \"button\" | undefined;\n        }>;\n        NextButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ButtonHTMLAttributes",
              "canonicalReference": "@types/react!React.ButtonHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"label\" | \"title\" | \"as\" | \"size\" | \"htmlDisabled\" | \"styleType\" | \"labelProps\" | \"stretched\" | \"isActive\" | \"iconProps\"> & {\n            isActive?: boolean;\n            label?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n            labelProps?: "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ComponentPropsWithoutRef",
              "canonicalReference": "@types/react!React.ComponentPropsWithoutRef:type"
            },
            {
              "kind": "Content",
              "text": "<typeof import(\"../Tooltip/Tooltip.js\")."
            },
            {
              "kind": "Reference",
              "text": "Tooltip",
              "canonicalReference": "@itwin/itwinui-react!Tooltip"
            },
            {
              "kind": "Content",
              "text": ">, \"content\" | \"reference\" | \"ariaStrategy\" | \"children\">;\n            iconProps?: "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentProps",
              "canonicalReference": "@types/react!React.ComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "<\"span\">;\n            title?: string;\n        } & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"../Buttons/Button.js\")."
            },
            {
              "kind": "Reference",
              "text": "ButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~ButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"loading\" | \"startIcon\" | \"endIcon\" | \"labelProps\" | \"startIconProps\" | \"endIconProps\"> & {\n            as?: \"button\" | undefined;\n        }>;\n    };\n    DotsList: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {\n        length?: number;\n        currentIndex?: number;\n        onSlideChange?: (index: number) => void;\n    }>;\n    Dot: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", {\n        isActive?: boolean;\n        isSmall?: boolean;\n        isSmaller?: boolean;\n    }>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Carousel/Carousel.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Carousel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 67
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Checkbox:var",
          "docComment": "/**\n * Simple input checkbox\n *\n * @example\n *\n * <Checkbox /> <Checkbox label='Basic Checkbox' /> <Checkbox label='Disabled Checkbox' disabled /> <Checkbox label='Checked' checked /> <Checkbox label='Positive Checkbox' status='positive' /> <Checkbox label='Warning Checkbox' status='warning' /> <Checkbox label='Negative Checkbox' status='negative' /> <Checkbox label='Visibility Checkbox' variant='eyeball' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Checkbox: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "CheckboxProps",
              "canonicalReference": "@itwin/itwinui-react!~CheckboxProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Checkbox/Checkbox.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Checkbox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Code:var",
          "docComment": "/**\n * Inline code element.\n *\n * @example\n *\n * <p>Some <Code>inline code</Code> in a paragraph</p>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Code: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"code\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/Typography/Code.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Code",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ColorBuilder:var",
          "docComment": "/**\n * `ColorBuilder` consists of two parts: a color canvas to adjust saturation and lightness values, and a set of sliders to adjust hue and alpha values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorBuilder: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ColorBuilderProps",
              "canonicalReference": "@itwin/itwinui-react!~ColorBuilderProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ColorPicker/ColorBuilder.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ColorBuilder",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ColorInputPanel:var",
          "docComment": "/**\n * `ColorInputPanel` shows input fields to enter precise color values in the specified format. It also allows switching between the specified formats using a swap button.\n *\n * @example\n *\n * <ColorPicker> // ... <ColorInputPanel defaultColorFormat='hsl' /> </ColorPicker>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorInputPanel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ColorInputPanelProps",
              "canonicalReference": "@itwin/itwinui-react!~ColorInputPanelProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ColorPicker/ColorInputPanel.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ColorInputPanel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ColorPalette:var",
          "docComment": "/**\n * `ColorPalette` is used to show a group of `ColorSwatch` components.\n *\n * @example\n *\n * <ColorPalette colors={['#ffffff', '#000000']} />\n *\n * @example\n *\n * <ColorPalette> <ColorSwatch color='#ffffff' /> <ColorSwatch color='#000000' /> // ... </ColorPalette>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorPalette: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ColorPaletteProps",
              "canonicalReference": "@itwin/itwinui-react!~ColorPaletteProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ColorPicker/ColorPalette.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ColorPalette",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ColorPicker:var",
          "docComment": "/**\n * ColorPicker to display color builder options, color inputs, and a palette of ColorSwatches.\n *\n * @example\n *\n * <ColorPicker onChangeComplete={() => {}} selectedColor={activeColor}> <ColorPalette colors={['#FFFFFF', '#5A6973']} /> </ColorPicker>\n *\n * @example\n *\n * <ColorPicker onChangeComplete={() => {}} selectedColor={activeColor}> <ColorBuilder /> <ColorInputPanel defaultColorFormat='hsl' /> <ColorPalette label='Saved colors' colors={['#FFFFFF', '#5A6973']} /> </ColorPicker>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorPicker: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ColorPickerProps",
              "canonicalReference": "@itwin/itwinui-react!~ColorPickerProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ColorPicker/ColorPicker.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ColorPicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ColorSwatch:var",
          "docComment": "/**\n * ColorSwatch component to display within a color palette.\n *\n * @example\n *\n * <ColorSwatch color='#23450b' onClick={onClick}/> <ColorSwatch color={{ r: 255, g: 255, b: 0 }} onClick={onClick}/>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorSwatch: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "ColorSwatchProps",
              "canonicalReference": "@itwin/itwinui-react!~ColorSwatchProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ColorPicker/ColorSwatch.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ColorSwatch",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@itwin/itwinui-react!ColorValue:class",
          "docComment": "/**\n * An immutable integer representation of a color.\n *\n * Colors are stored as 4 components: Red, Blue, Green, and Transparency (0=fully opaque). Each is an 8-bit integer between 0-255. ColorValue uses `0xTTBBGGRR` (red in the low byte. 0==fully opaque in high byte) internally, but it also provides methods to return colors in popular web formats.\n *\n * The `create` method accepts any ColorType format.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ColorValue "
            }
          ],
          "fileUrlPath": "esm/utils/color/ColorValue.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ColorValue",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue.create:member(1)",
              "docComment": "/**\n * Create a new ColorValue.\n *\n * @param val - value to use.\n *\n * If a string, must be in one of the following forms: *\"rgb(255,0,0)\"* *\"rgba(255,0,0,.2)\"* *\"rgb(100%,0%,0%)\"* *\"hsl(120,50%,50%)\"* *\"#rrggbb\"*\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(val?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorType",
                  "canonicalReference": "@itwin/itwinui-react!~ColorType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@itwin/itwinui-react!ColorValue:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#equals:member(1)",
              "docComment": "/**\n * True if the value of this ColorValue is the same as another ColorValue.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(other: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@itwin/itwinui-react!ColorValue:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue.fromString:member(1)",
              "docComment": "/**\n * Create a ColorValue from a string representation. The following representations are supported: *\"rgb(255,0,0)\"* *\"rgba(255,0,0,.2)\"* *\"rgb(100%,0%,0%)\"* *\"hsl(120,50%,50%)\"* *\"#rrggbb\"* NOTE: If defaultColorIfNotParsed is not defined and string is invalid then error is thrown. This allows component builders to know if they received bad input from user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromString(val: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", defaultColorIfNotParsed?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@itwin/itwinui-react!ColorValue:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@itwin/itwinui-react!ColorValue:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "defaultColorIfNotParsed",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "fromString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue.fromTbgr:member(1)",
              "docComment": "/**\n * Create a ColorValue from its 0xTTBBGGRR representation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromTbgr(tbgr: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@itwin/itwinui-react!ColorValue:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tbgr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "fromTbgr"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#getAlpha:member(1)",
              "docComment": "/**\n * Get the alpha value for this ColorDef. Will be between 0-255\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAlpha(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAlpha"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue.getFormattedColorNumber:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getFormattedColorNumber(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", precision?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "precision",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getFormattedColorNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toHexString:member(1)",
              "docComment": "/**\n * Convert this ColorValue to a string in the form \"#rrggbb\" or \"#rrggbbaa\" where values are hex digits of the respective colors\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHexString(includeAlpha?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "includeAlpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toHexString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toHslColor:member(1)",
              "docComment": "/**\n * Return HslColor from this ColorValue\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHslColor(): "
                },
                {
                  "kind": "Reference",
                  "text": "HslColor",
                  "canonicalReference": "@itwin/itwinui-react!~HslColor:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toHslColor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toHslString:member(1)",
              "docComment": "/**\n * Convert this ColorValue to a string in the form \"hsl(h,s,l) or hsla(h,s,l,a)\" - i.e hsl(120,50%,50%).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHslString(includeAlpha?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "includeAlpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toHslString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toHsvColor:member(1)",
              "docComment": "/**\n * Return HsvColor from this ColorValue\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHsvColor(): "
                },
                {
                  "kind": "Reference",
                  "text": "HsvColor",
                  "canonicalReference": "@itwin/itwinui-react!~HsvColor:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toHsvColor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toHsvString:member(1)",
              "docComment": "/**\n * Convert this ColorValue to a string in the form \"hsv(h,s,v) or hsva(h,s,v,a)\" - i.e hsv(120,50%,50%).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHsvString(includeAlpha?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "includeAlpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toHsvString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toRgbColor:member(1)",
              "docComment": "/**\n * Create an RgbColor from this ColorValue\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toRgbColor(): "
                },
                {
                  "kind": "Reference",
                  "text": "RgbColor",
                  "canonicalReference": "@itwin/itwinui-react!~RgbColor:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toRgbColor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toRgbString:member(1)",
              "docComment": "/**\n * Convert the 0xTTBBGGRR color to a string of the form \"rgba(r,g,b,a)\" where the color components are specified in decimal and the alpha component is a fraction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toRgbString(includeAlpha?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "includeAlpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toRgbString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@itwin/itwinui-react!ColorValue#toTbgr:member(1)",
              "docComment": "/**\n * Convert this ColorValue to an unsigned 32 bit integer representing the 0xTTBBGGRR value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toTbgr(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toTbgr"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!ComboBox:function(1)",
          "docComment": "/**\n * ComboBox component that allows typing a value to filter the options in dropdown list. Values can be selected either using mouse clicks or using the Enter key.\n *\n * @example\n *\n * <ComboBox options={[ { label: 'Item 1', value: 1 }, { label: 'Item 2', value: 2 }, { label: 'Item 3', value: 3 }, ]} onChange={() => {}} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ComboBox: <T>(props: "
            },
            {
              "kind": "Reference",
              "text": "ComboBoxProps",
              "canonicalReference": "@itwin/itwinui-react!~ComboBoxProps:type"
            },
            {
              "kind": "Content",
              "text": "<T> & {\n    ref?: "
            },
            {
              "kind": "Reference",
              "text": "React.ForwardedRef",
              "canonicalReference": "@types/react!React.ForwardedRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            }
          ],
          "fileUrlPath": "esm/core/ComboBox/ComboBox.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ComboBox"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!DatePicker:var",
          "docComment": "/**\n * Date picker component\n *\n * @example\n *\n * <DatePicker date={new Date()} onChange={(e) => console.log('New date value: ' + e)} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DatePicker: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "DatePickerProps",
              "canonicalReference": "@itwin/itwinui-react!~DatePickerProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/DatePicker/DatePicker.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DatePicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!DateRangeFilterOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DateRangeFilterOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    formatDate?: (date: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ") => string;\n    parseInput?: (text: string) => "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    placeholder?: string;\n    translatedLabels?: "
            },
            {
              "kind": "Reference",
              "text": "DateRangeTranslation",
              "canonicalReference": "@itwin/itwinui-react!~DateRangeTranslation:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "FilterButtonBarTranslation",
              "canonicalReference": "@itwin/itwinui-react!~FilterButtonBarTranslation:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ComponentProps",
              "canonicalReference": "@types/react!React.ComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "DateRangeFilter",
              "canonicalReference": "@itwin/itwinui-react!~DateRangeFilter:var"
            },
            {
              "kind": "Content",
              "text": ">, 'showYearSelection'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Table/filters/tableFilters.d.ts",
          "releaseTag": "Public",
          "name": "DateRangeFilterOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!DefaultCell:var",
          "docComment": "/**\n * Default cell. It should be passed to `cellRenderer`. It can can be used to pass native HTML attributes to the cell container.\n *\n * @example\n *\n * { Header: 'Name', accessor: 'name', cellRenderer: (props) => <DefaultCell {...props} />, }\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultCell: "
            },
            {
              "kind": "Content",
              "text": "{\n    <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>>(props: "
            },
            {
              "kind": "Reference",
              "text": "DefaultCellProps",
              "canonicalReference": "@itwin/itwinui-react!~DefaultCellProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>): "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/cells/DefaultCell.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultCell",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!defaultFooterElements:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "defaultFooterElements: "
            },
            {
              "kind": "Reference",
              "text": "FooterElement",
              "canonicalReference": "@itwin/itwinui-react!FooterElement:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "fileUrlPath": "esm/core/Footer/Footer.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "defaultFooterElements",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Dialog:var",
          "docComment": "/**\n * Dialog component.\n *\n * @example\n *\n * <Dialog isOpen={isOpen} onClose={() => setIsOpen(false)} trapFocus preventDocumentScroll > <Dialog.Backdrop /> <Dialog.Main aria-modal> <Dialog.TitleBar>My dialog title</Dialog.TitleBar> <Dialog.Content> Here is my dialog content </Dialog.Content> <Dialog.ButtonBar> <Button styleType='high-visibility'>Confirm</Button> <Button>Close</Button> </Dialog.ButtonBar> </Dialog.Main> </Dialog>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Dialog: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "DialogProps",
              "canonicalReference": "@itwin/itwinui-react!~DialogProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Backdrop: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", import(\"../Backdrop/Backdrop.js\")."
            },
            {
              "kind": "Reference",
              "text": "BackdropProps",
              "canonicalReference": "@itwin/itwinui-react!~BackdropProps:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DialogContextProps",
              "canonicalReference": "@itwin/itwinui-react!~DialogContextProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"onClose\" | \"isDismissible\" | \"closeOnExternalClick\" | \"relativeTo\">>;\n    Main: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", import(\"./DialogMain.js\")."
            },
            {
              "kind": "Reference",
              "text": "DialogMainProps",
              "canonicalReference": "@itwin/itwinui-react!~DialogMainProps_2:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    TitleBar: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {\n        children?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n        titleText?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    } & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DialogContextProps",
              "canonicalReference": "@itwin/itwinui-react!~DialogContextProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"onClose\" | \"isDismissible\" | \"isDraggable\">> & {\n        Title: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    };\n    Content: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    ButtonBar: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Dialog/Dialog.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Dialog",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 33
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Divider:var",
          "docComment": "/**\n * Shows a divider\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Divider: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"hr\", "
            },
            {
              "kind": "Reference",
              "text": "DividerProps",
              "canonicalReference": "@itwin/itwinui-react!~DividerProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Divider/Divider.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Divider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!DropdownButton:var",
          "docComment": "/**\n * Button that opens a DropdownMenu.\n *\n * @example\n *\n * const menuItems = (close: () => void) => [ <MenuItem key={1} onClick={onClick(1, close)}>Item #1</MenuItem>, <MenuItem key={2} onClick={onClick(2, close)}>Item #2</MenuItem>, ]; <DropdownButton menuItems={menuItems}>Default</DropdownButton>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DropdownButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "DropdownButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~DropdownButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Buttons/DropdownButton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DropdownButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!DropdownMenu:var",
          "docComment": "/**\n * Dropdown menu component. Built on top of the {@link Popover} component.\n *\n * @example\n *\n * const menuItems = (close: () => void) => [ <MenuItem key={1} onClick={onClick(1, close)}> Item #1 </MenuItem>, <MenuItem key={2} onClick={onClick(2, close)}> Item #2 </MenuItem>, <MenuItem key={3} onClick={onClick(3, close)}> Item #3 </MenuItem>, ]; <DropdownMenu menuItems={menuItems}> <Button>Menu</Button> </DropdownMenu>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DropdownMenu: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "DropdownMenuProps",
              "canonicalReference": "@itwin/itwinui-react!~DropdownMenuProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/DropdownMenu/DropdownMenu.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DropdownMenu",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!EditableCell:var",
          "docComment": "/**\n * Editable cell. It should be passed to `cellRenderer`.\n *\n * @example\n *\n * { Header: 'Name', accessor: 'name', cellRenderer: (props) => <EditableCell {...props} onCellEdit={onCellEditHandler} />, }\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EditableCell: "
            },
            {
              "kind": "Content",
              "text": "{\n    <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>>(props: "
            },
            {
              "kind": "Reference",
              "text": "EditableCellProps",
              "canonicalReference": "@itwin/itwinui-react!~EditableCellProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>): "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/cells/EditableCell.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "EditableCell",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ErrorPage:var",
          "docComment": "/**\n * @deprecated\n *\n * Use `NonIdealState` instead for a smaller client bundle.\n *\n * A stylized display to communicate common http errors.\n *\n * @example\n *\n * <ErrorPage errorType='401' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ErrorPage: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ErrorPageProps",
              "canonicalReference": "@itwin/itwinui-react!~ErrorPageProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/NonIdealState/ErrorPage.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ErrorPage",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!ErrorPageType:type",
          "docComment": "/**\n * @deprecated\n *\n * Use `NonIdealState` instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ErrorPageType = "
            },
            {
              "kind": "Content",
              "text": "'300' | '301' | '302' | '303' | '304' | '305' | '307' | '308' | '401' | '403' | '404' | '408' | '500' | '502' | '503' | '504' | 'generic'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/NonIdealState/ErrorPage.d.ts",
          "releaseTag": "Public",
          "name": "ErrorPageType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!ErrorTypeTranslations:type",
          "docComment": "/**\n * @deprecated\n *\n * Use `NonIdealState` instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ErrorTypeTranslations = "
            },
            {
              "kind": "Content",
              "text": "{\n    badGateway: string;\n    error: string;\n    forbidden: string;\n    internalServerError: string;\n    redirect?: string;\n    pageNotFound: string;\n    serviceUnavailable: string;\n    timedOut?: string;\n    unauthorized: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/NonIdealState/ErrorPage.d.ts",
          "releaseTag": "Public",
          "name": "ErrorTypeTranslations",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ExpandableBlock:var",
          "docComment": "/**\n * Expandable block with customizable Title, Caption, Content and EndIcon subcomponents.\n *\n * @example\n *\n * <ExpandableBlock.Wrapper> <ExpandableBlock.Trigger> <ExpandableBlock.ExpandIcon/> <ExpandableBlock.LabelArea> <ExpandableBlock.Title/> <ExpandableBlock.Caption/> </ExpandableBlock.LabelArea> <ExpandableBlock.EndIcon/> </ExpandableBlock.Trigger> <ExpandableBlock.Content/> </ExpandableBlock.Wrapper>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ExpandableBlock: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ExpandableBlockOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ExpandableBlockOwnProps:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    title?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExpandableBlockTriggerOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ExpandableBlockTriggerOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"caption\" | \"endIcon\">> & {\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ExpandableBlockOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ExpandableBlockOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Trigger: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ExpandableBlockTriggerOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ExpandableBlockTriggerOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    ExpandIcon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    LabelArea: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Title: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", {}>;\n    Caption: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    EndIcon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"fill\" | \"as\" | \"key\" | \"size\" | keyof "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": "> | \"padded\"> & {\n        size?: \"auto\" | \"small\" | \"medium\" | \"large\" | import(\"../../utils/types.js\")."
            },
            {
              "kind": "Reference",
              "text": "AnyString",
              "canonicalReference": "@itwin/itwinui-react!~AnyString_2:type"
            },
            {
              "kind": "Content",
              "text": ";\n        fill?: \"default\" | \"positive\" | \"informational\" | \"negative\" | \"warning\" | import(\"../../utils/types.js\")."
            },
            {
              "kind": "Reference",
              "text": "AnyString",
              "canonicalReference": "@itwin/itwinui-react!~AnyString_2:type"
            },
            {
              "kind": "Content",
              "text": ";\n        padded?: boolean;\n    } & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"ref\"> & {\n        as?: \"span\" | undefined;\n    }, \"ref\">>;\n    Content: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ExpandableBlockContentOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ExpandableBlockContentOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "fileUrlPath": "esm/core/ExpandableBlock/ExpandableBlock.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ExpandableBlock",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 63
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!ExpanderColumn:function(1)",
          "docComment": "/**\n * Expander column that adds sub-content expander column to the Table. It is recommended to use it as the first column or after selection column.\n *\n * @example\n *\n * const subComponent = useCallback( (row: Row) => ( <div style={{ padding: 16 }}> <Text variant='leading'>Extra information</Text> <pre> <code>{JSON.stringify({ values: row.values }, null, 2)}</code> </pre> </div> ), [], ); const isExpanderDisabled = useCallback((rowData) => { return rowData.name === 'Name2'; }, []); const columns = useMemo(() => [ ExpanderColumn({ subComponent, isDisabled: isExpanderDisabled }), // Rest of your columns ], [isExpanderDisabled, subComponent]);\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ExpanderColumn: <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ">(props?: "
            },
            {
              "kind": "Content",
              "text": "{\n    subComponent?: (row: "
            },
            {
              "kind": "Reference",
              "text": "Row",
              "canonicalReference": "@itwin/itwinui-react!~Row:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    isDisabled?: (rowData: T) => boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    id: string;\n    disableResizing: boolean;\n    disableGroupBy: boolean;\n    disableReordering: boolean;\n    minWidth: number;\n    width: number;\n    maxWidth: number;\n    columnClassName: string;\n    cellClassName: string;\n    Cell: (props: "
            },
            {
              "kind": "Reference",
              "text": "CellProps",
              "canonicalReference": "@itwin/itwinui-react!~CellProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    cellRenderer: (props: "
            },
            {
              "kind": "Reference",
              "text": "CellRendererProps",
              "canonicalReference": "@itwin/itwinui-react!~CellRendererProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/columns/expanderColumn.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 9
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ExpanderColumn"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Fieldset:var",
          "docComment": "/**\n * Fieldset component to group several inputs, controls and labels within a form.\n *\n * @example\n *\n * <Fieldset legend='Settings'> <Input /> <InputGroup> <ToggleSwitch /> <ToggleSwitch /> </InputGroup> </Fieldset>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Fieldset: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"fieldset\", "
            },
            {
              "kind": "Reference",
              "text": "FieldsetProps",
              "canonicalReference": "@itwin/itwinui-react!~FieldsetProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Fieldset/Fieldset.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Fieldset",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!FileEmptyCard:var",
          "docComment": "/**\n * Empty file card to be used with the `FileUploadCard` component when no file has been uploaded.\n *\n * @example\n *\n * <FileEmptyCard /> <FileEmptyCard> <FileEmptyCard.Icon> <SvgSmileySadVery /> </FileEmptyCard.Icon> <FileEmptyCard.Text> <FileUploadCard.InputLabel> Custom Label Text </FileUploadCard.InputLabel> <div>Custom Description Text</div> </FileEmptyCard.Text> </FileEmptyCard>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FileEmptyCard: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}> & {\n    Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Text: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/FileUpload/FileEmptyCard.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FileEmptyCard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!FileUpload:var",
          "docComment": "/**\n * File upload component to be wrapped around `FileUploadCard` or any arbitrary component. Provides support for dragging and dropping multiple files.\n *\n * @example\n *\n * <FileUpload onFileDropped={console.log}><FileUploadCard /></FileUpload> <FileUpload dragContent='Drop file here' onFileDropped={console.log}><Textarea /></FileUpload>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FileUpload: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "FileUploadProps",
              "canonicalReference": "@itwin/itwinui-react!~FileUploadProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/FileUpload/FileUpload.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FileUpload",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!FileUploadCard:var",
          "docComment": "/**\n * Default card to be used with the `FileUpload` wrapper component for single-file uploading.\n *\n * @example\n *\n * <FileUploadCard /> <FileUploadCard files={files} onFilesChange={(files) => setFiles(files)}> <FileUploadCard.Icon> <SvgSmileyHappyVery /> </FileUploadCard.Icon> <FileUploadCard.Info> <FileUploadCard.Title>Custom File Name</FileUploadCard.Title> <FileUploadCard.Description> Custom File Description </FileUploadCard.Description> </FileUploadCard.Info> <FileUploadCard.Action> <Button onClick={() => { setFiles([]); }} /> <FileUploadCard.Input name={fileInputId} ref={inputRef} /> </FileUploadCard.Action> </FileUploadCard>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FileUploadCard: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "FileUploadCardProps",
              "canonicalReference": "@itwin/itwinui-react!~FileUploadCardProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Info: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Title: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Description: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Action: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    InputLabel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"label\", {}>;\n    Input: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/FileUpload/FileUploadCard.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FileUploadCard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 19
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!FileUploadTemplate:var",
          "docComment": "/**\n * @deprecated\n *\n * Use [`FileUploadCard`](https://itwinui.bentley.com/docs/fileupload#fileuploadcard) instead.\n *\n * Default template to be used with the `FileUpload` wrapper component. Contains a hidden input with styled labels (customizable).\n *\n * @example\n *\n * <FileUploadTemplate onChange={(e) => console.log(e.target.files)} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FileUploadTemplate: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "FileUploadTemplateProps",
              "canonicalReference": "@itwin/itwinui-react!~FileUploadTemplateProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/FileUpload/FileUploadTemplate.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FileUploadTemplate",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!FilterButtonBar:function(1)",
          "docComment": "/**\n * Button bar component that should be used in a filter. It already has Filter and Clear buttons.\n *\n * @example\n *\n * <FilterButtonBar setFilter={() => setFilter(text)} clearFilter={clearFilter} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FilterButtonBar: (props: "
            },
            {
              "kind": "Reference",
              "text": "FilterButtonBarProps",
              "canonicalReference": "@itwin/itwinui-react!~FilterButtonBarProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            }
          ],
          "fileUrlPath": "esm/core/Table/filters/FilterButtonBar.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "FilterButtonBar"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Flex:var",
          "docComment": "/**\n * A utility component that makes it easier to work with CSS flexbox and iTwinUI design tokens. Supports all flex properties. Can be used with or without `Flex.Item` and `Flex.Spacer` subcomponents.\n *\n * @example\n *\n * <Flex> <Icon>...</Icon> <Text>...</Text> <Flex.Spacer /> <IconButton>...</IconButton> </Flex>\n *\n * @example\n *\n * <Flex gap='m' flexWrap='wrap'> <Flex.Item>...</Flex.Item> <Flex.Item>...</Flex.Item> ... </Flex>\n *\n * @example\n *\n * <Flex gap='l'> <Flex.Item>...</Flex.Item> <Flex.Item>...</Flex.Item> <Flex.Item gapBefore='s'>...</Flex.Item> <Flex.Item>...</Flex.Item> </Flex>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Flex: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "FlexOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~FlexOwnProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Item: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "FlexItemOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~FlexItemOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Spacer: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "FlexSpacerOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~FlexSpacerOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Flex/Flex.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Flex",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Footer:var",
          "docComment": "/**\n * Footer element with all needed legal and info links. Be sure to place it manually at the bottom of your page. You can use position 'absolute' with relative body or set the height of the content and place footer at the end.\n *\n * @example\n *\n * <caption>Appending custom element after default elements</caption> <Footer customElements={[{title: 'Bentley', url: 'https://www.bentley.com/'}]} />\n *\n * @example\n *\n * <caption>Returning only custom elements</caption> <Footer customElements={() => newFooterElements)} />\n *\n * @example\n *\n * <caption>Filtering out a specific element</caption> <Footer customElements={(defaultElements) => defaultElements.filter(({ key }) => key !== 'privacy' )} />\n *\n * @example\n *\n * <caption>Changing a url</caption> <Footer customElements={(defaultElements) => defaultElements.map(element => ({ ...element, url: element.key === 'privacy' ? customPrivacyUrl : element.url }))} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Footer: "
            },
            {
              "kind": "Content",
              "text": "((props: "
            },
            {
              "kind": "Reference",
              "text": "FooterProps",
              "canonicalReference": "@itwin/itwinui-react!~FooterProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ") & {\n    List: import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"ul\", {}>;\n    Item: import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"li\", {}>;\n    Separator: import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"li\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Footer/Footer.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Footer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!FooterElement:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FooterElement = "
            },
            {
              "kind": "Content",
              "text": "{\n    title: string;\n    url?: string;\n    key?: keyof "
            },
            {
              "kind": "Reference",
              "text": "TitleTranslations",
              "canonicalReference": "@itwin/itwinui-react!TitleTranslations:type"
            },
            {
              "kind": "Content",
              "text": " | 'copyright' | (string & "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<never, never>);\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Footer/Footer.d.ts",
          "releaseTag": "Public",
          "name": "FooterElement",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!generateLocalizedStrings:function(1)",
          "docComment": "/**\n * Generate localized months and days strings using `Intl.DateTimeFormat` for passed locale to use in DatePicker component. If locale is not passed, browser locale will be used.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "generateLocalizedStrings: (locale?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "DatePickerLocalizedNames",
              "canonicalReference": "@itwin/itwinui-react!~DatePickerLocalizedNames:type"
            }
          ],
          "fileUrlPath": "esm/core/DatePicker/DatePicker.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "locale",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "generateLocalizedStrings"
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!getUserColor:function(1)",
          "docComment": "/**\n * Generate color from user name or email. Recommended to use for `backgroundColor` in `Avatar` component.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getUserColor: (emailOrName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "\"var(--iui-color-background-skyblue)\" | \"var(--iui-color-background-celery)\" | \"var(--iui-color-background-froly)\" | \"var(--iui-color-background-steelblue)\" | \"var(--iui-color-background-sunglow)\" | \"var(--iui-color-background-seabuckthorn)\" | \"var(--iui-color-background-montecarlo)\" | \"var(--iui-color-background-poloblue)\" | \"var(--iui-color-background-bouquet)\" | \"var(--iui-color-background-ash)\" | \"var(--iui-color-background-oak)\""
            }
          ],
          "fileUrlPath": "esm/utils/functions/colors.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "emailOrName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getUserColor"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Header:var",
          "docComment": "/**\n * Application header\n *\n * @example\n *\n * <Header appLogo={<HeaderLogo logo={<SvgImodelHollow />}>iTwin Application</HeaderLogo>} breadcrumbs={ <HeaderBreadcrumbs items={[ <HeaderButton key='project' name='Project A' />, <HeaderButton key='imodel' name='IModel X' /> ]} /> } actions={[ <IconButton><SvgNotification /></IconButton>, <DropdownMenu> <IconButton> <SvgHelpCircularHollow /> </IconButton> </DropdownMenu>, <DropdownMenu menuItems={…}> <IconButton styleType='borderless'> <Avatar … /> </IconButton> </DropdownMenu> ]} isSlim />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Header: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"header\", "
            },
            {
              "kind": "Reference",
              "text": "HeaderProps",
              "canonicalReference": "@itwin/itwinui-react!~HeaderProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Header/Header.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Header",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!HeaderBreadcrumbs:var",
          "docComment": "/**\n * Header breadcrumbs, adds chevron between each provided items.\n *\n * @example\n *\n * <HeaderBreadcrumbs items={[ <HeaderButton key={...} ... /> <HeaderButton key={...} ... /> ]} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HeaderBreadcrumbs: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"nav\", "
            },
            {
              "kind": "Reference",
              "text": "HeaderBreadcrumbsProps",
              "canonicalReference": "@itwin/itwinui-react!~HeaderBreadcrumbsProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Header/HeaderBreadcrumbs.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "HeaderBreadcrumbs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!HeaderButton:var",
          "docComment": "/**\n * Header button that handles slim state of the `Header` it's in. When in slim mode, will only display the name and reduce icon size. Will display an arrow on the right if `menuItems` prop is provided.\n *\n * @example\n *\n * <HeaderButton name='Project A' description='0n00434' menuItems={...} /> <HeaderButton name='Project B' description='0n00434' startIcon={<SvgImodelHollow />} /> <HeaderButton name='Project C' startIcon={<img style={{ objectFit: 'cover' }} src='project.png' />} /> <HeaderButton name='Project D' isActive />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HeaderButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "HeaderButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~HeaderButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Header/HeaderButton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "HeaderButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!HeaderLogo:var",
          "docComment": "/**\n * Header Title section\n *\n * @example\n *\n * <HeaderLogo logo={<SvgImodelHollow />}>iTwin Application</HeaderLogo> <HeaderLogo logo={<SvgImodelHollow />} /> <HeaderLogo logo={<img src='image.png' />} /> <HeaderLogo logo={<img src='data:image/png;base64,...' />}>Downloaded Image</HeaderLogo>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HeaderLogo: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "HeaderLogoOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~HeaderLogoOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Header/HeaderLogo.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "HeaderLogo",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Icon:var",
          "docComment": "/**\n * A utility component to provide size and fill to svgs. Works well with svgs from `@itwin/itwinui-icons-react`.\n *\n * @example\n *\n * <Icon> <SvgPlaceholder /> </Icon>\n *\n * @example\n *\n * <Icon fill='negative'> <SvgStatusError /> </Icon>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "IconProps",
              "canonicalReference": "@itwin/itwinui-react!~IconProps_2:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Icon/Icon.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Icon",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!IconButton:var",
          "docComment": "/**\n * Icon button\n *\n * @example\n *\n * <IconButton label='Add'><SvgAdd /></IconButton>\n *\n * @example\n *\n * <IconButton label='Add' styleType='borderless'><SvgAdd /></IconButton>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "IconButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IconButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Buttons/IconButton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "IconButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!IdeasButton:var",
          "docComment": "/**\n * Ideas button\n *\n * @example\n *\n * <IdeasButton />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "IdeasButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "IdeasButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IdeasButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Buttons/IdeasButton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "IdeasButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InformationPanel:var",
          "docComment": "/**\n * InformationPanel provides a way to view additional content or attributes without leaving the main content area (e.g. Table).\n *\n * The panel appears as an overlay on top of the main content.\n *\n * @example\n *\n * <InformationPanelWrapper> <Table ... /> // component to overlay <InformationPanel isOpen={true}> <InformationPanelHeader onClose={() => {}}> <Text variant='subheading'>InfoPanel heading</Text> </InformationPanelHeader> <InformationPanelBody> <Text>Metadata</Text> <InformationPanelContent ... /> <Text>Attributes</Text> <InformationPanelContent ... /> </InformationPanelBody> </InformationPanel> </InformationPanelWrapper>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InformationPanel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "InformationPanelProps",
              "canonicalReference": "@itwin/itwinui-react!~InformationPanelProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/InformationPanel/InformationPanel.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InformationPanel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InformationPanelBody:var",
          "docComment": "/**\n * Body of the `InformationPanel` containing the main content.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InformationPanelBody: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/InformationPanel/InformationPanelBody.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InformationPanelBody",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InformationPanelContent:var",
          "docComment": "/**\n * The `InformationPanelContent` component should be used inside `InformationPanelBody` to style rows of key/value pairs, where the key is ideally represented by a `Label` component and the value can be any input element (including readonly inputs for non-modifiable fields).\n *\n * By default, the pairs are displayed of label and input are displayed in separate lines, but displayStyle can be set to 'inline' to show them in the same line with correct alignment.\n *\n * You can use multiple `InformationPanelContent` instances inside one `InformationPanelBody`; this is useful when you want to show other content, e.g. separate headings for different sections of key/value pairs.\n *\n * @example\n *\n * <InformationPanelContent displayStyle='inline'> <Label htmlFor='name-input'>File name</Label> <Input id='name-input' value='Alpha.mp3' />\n *\n * <Label htmlFor='year-input'>Year</Label> <Input id='year-input' value='2021' />\n *\n * <Label htmlFor='path-input'>Path</Label> <Input id='path-input' value='/Shared/Music/' /> </InformationPanelContent>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InformationPanelContent: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "InformationPanelContentProps",
              "canonicalReference": "@itwin/itwinui-react!~InformationPanelContentProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/InformationPanel/InformationPanelContent.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InformationPanelContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InformationPanelHeader:var",
          "docComment": "/**\n * Header of the InformationPanel to be passed in the `header` prop.\n *\n * @example\n *\n * <InformationPanelHeader onClose={() => {}} actions={( <> <IconButton styleType='borderless' onClick={() => {}}><SvgEdit /></IconButton> <IconButton styleType='borderless' onClick={() => {}}><SvgDelete /></IconButton> </> )} > <Text variant='subheading'>InfoPanel heading</Text> </InformationPanelHeader>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InformationPanelHeader: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "InformationPanelHeaderProps",
              "canonicalReference": "@itwin/itwinui-react!~InformationPanelHeaderProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/InformationPanel/InformationPanelHeader.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InformationPanelHeader",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InformationPanelWrapper:var",
          "docComment": "/**\n * InformationPanelWrapper should contain the `InformationPanel` and the component over which the panel will overlay.\n *\n * @example\n *\n * <InformationPanelWrapper> <Table ... /> <InformationPanel ... /> </InformationPanelWrapper>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InformationPanelWrapper: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/InformationPanel/InformationPanelWrapper.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InformationPanelWrapper",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Input:var",
          "docComment": "/**\n * Basic input component\n *\n * @example\n *\n * <Input disabled /> <Input size='small' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Input: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "InputProps",
              "canonicalReference": "@itwin/itwinui-react!~InputProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Input/Input.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Input",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InputGrid:var",
          "docComment": "/**\n * InputGrid component is used to display form fields (input, textarea, select) with label and/or status message\n *\n * Form fields are automatically associated with the label and status message for better accessibility.\n *\n * @example\n *\n * <InputGrid> <Label>This is a label</Label> <Input /> <StatusMessage>This is a message</StatusMessage> </InputGrid>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InputGrid: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "InputGridOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~InputGridOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/InputGrid/InputGrid.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InputGrid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InputGroup:var",
          "docComment": "/**\n * Group Checkbox/Radio components together\n *\n * @example\n *\n * <caption>Group checkboxes</caption> <InputGroup label='Checkbox group'> <Checkbox /> <Checkbox /> </InputGroup>\n *\n * @example\n *\n * <caption>Group radios</caption> <InputGroup label='Radio group'> <Radio /> <Radio /> </InputGroup>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InputGroup: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "InputGroupProps",
              "canonicalReference": "@itwin/itwinui-react!~InputGroupProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/InputGroup/InputGroup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InputGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!InputWithDecorations:var",
          "docComment": "/**\n * Input component with various additional decorations. You can add icons, buttons and other various subcomponents to it.\n *\n * If you are not using default `InputWithDecorations.Icon` and `InputWithDecorations.Button`, use borderless versions of other components.\n *\n * @example\n *\n * <InputWithDecorations> <InputWithDecorations.Input /> <InputWithDecorations.Icon> <SvgAdd /> </InputWithDecorations.Icon> </InputWithDecorations>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "InputWithDecorations: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"as\" | keyof import(\"../../utils/index.js\")."
            },
            {
              "kind": "Reference",
              "text": "InputFlexContainerProps",
              "canonicalReference": "@itwin/itwinui-react!~InputFlexContainerProps_2:type"
            },
            {
              "kind": "Content",
              "text": "> & import(\"../../utils/index.js\")."
            },
            {
              "kind": "Reference",
              "text": "InputFlexContainerProps",
              "canonicalReference": "@itwin/itwinui-react!~InputFlexContainerProps_2:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    as?: \"div\" | undefined;\n}> & {\n    Input: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "InputProps",
              "canonicalReference": "@itwin/itwinui-react!~InputProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Button: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ButtonHTMLAttributes",
              "canonicalReference": "@types/react!React.ButtonHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"label\" | \"title\" | \"as\" | \"size\" | \"htmlDisabled\" | \"styleType\" | \"labelProps\" | \"stretched\" | \"isActive\" | \"iconProps\"> & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"../Buttons/IconButton.js\")."
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IconButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"styleType\"> & {\n        styleType?: import(\"../Buttons/IconButton.js\")."
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IconButtonProps:type"
            },
            {
              "kind": "Content",
              "text": "[\"styleType\"];\n    } & {\n        as?: \"button\" | undefined;\n    }>;\n    Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"../Icon/Icon.js\")."
            },
            {
              "kind": "Reference",
              "text": "IconProps",
              "canonicalReference": "@itwin/itwinui-react!~IconProps_2:type"
            },
            {
              "kind": "Content",
              "text": ", \"padded\"> & {\n        padded?: import(\"../Icon/Icon.js\")."
            },
            {
              "kind": "Reference",
              "text": "IconProps",
              "canonicalReference": "@itwin/itwinui-react!~IconProps_2:type"
            },
            {
              "kind": "Content",
              "text": "[\"padded\"];\n    }>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/InputWithDecorations/InputWithDecorations.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "InputWithDecorations",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 47
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!ItemRendererProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ItemRendererProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    close: () => void;\n    isSelected: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Select/Select.d.ts",
          "releaseTag": "Public",
          "name": "ItemRendererProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Kbd:var",
          "docComment": "/**\n * A keyboard key element.\n *\n * @example\n *\n * <Kbd>A</Kbd> <Kbd title='Enter'>{KbdKeys.Enter}</Kbd>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Kbd: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"kbd\", "
            },
            {
              "kind": "Reference",
              "text": "KbdProps",
              "canonicalReference": "@itwin/itwinui-react!~KbdProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Typography/Kbd.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Kbd",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!KbdKeys:var",
          "docComment": "/**\n * Some predefined strings for common keyboard keys.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KbdKeys: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly Command: \"⌘ Cmd\";\n    readonly Shift: \"⇧ Shift\";\n    readonly Backspace: \"⌫ Backspace\";\n    readonly Enter: \"↵ Enter\";\n    readonly Eject: \"⏏ Eject\";\n    readonly Control: \"Ctrl\";\n    readonly Windows: \"⊞ Win\";\n    readonly Apple: \"\";\n    readonly Option: \"⌥ Option\";\n    readonly Left: \"←\";\n    readonly Up: \"↑\";\n    readonly Right: \"→\";\n    readonly Down: \"↓\";\n}"
            }
          ],
          "fileUrlPath": "esm/core/Typography/Kbd.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "KbdKeys",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Label:var",
          "docComment": "/**\n * A standalone label to be used with input components (using `htmlFor`). Can be rendered as any element, e.g. span, using the `as` prop.\n *\n * @example\n *\n * <Label htmlFor='name-input'>Name</Label> <Input id='name-input' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Label: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"label\", "
            },
            {
              "kind": "Reference",
              "text": "LabelOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~LabelOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Label/Label.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Label",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!LabeledInput:var",
          "docComment": "/**\n * Basic labeled input component\n *\n * @example\n *\n * <LabeledInput label='My label' /> <LabeledInput disabled label='My label' /> <LabeledInput status='positive' label='Positive' /> <LabeledInput status='negative' label='Negative' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LabeledInput: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "LabeledInputProps",
              "canonicalReference": "@itwin/itwinui-react!~LabeledInputProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/LabeledInput/LabeledInput.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LabeledInput",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!LabeledSelect:function(1)",
          "docComment": "/**\n * Labeled select component to select value from options.\n *\n * @example\n *\n * <LabeledSelect label='Select Label' options={[ { value: 1, label: 'Item #1' }, { value: 2, label: 'Item #2' }, { value: 3, label: 'Item #3' }, ]} message='Help Message' /> <LabeledSelect label='Select Label' options={[ { value: 1, label: 'Item #1' }, { value: 2, label: 'Item #2' }, { value: 3, label: 'Item #3' }, ]} message='Positive Message' status='positive' /> <LabeledSelect label='Select Label' options={[ { value: 1, label: 'Item #1' }, { value: 2, label: 'Item #2' }, { value: 3, label: 'Item #3' }, ]} message='Custom Message' svgIcon={<SvgCamera />} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LabeledSelect: <T>(props: "
            },
            {
              "kind": "Reference",
              "text": "LabeledSelectProps",
              "canonicalReference": "@itwin/itwinui-react!~LabeledSelectProps:type"
            },
            {
              "kind": "Content",
              "text": "<T> & {\n    ref?: "
            },
            {
              "kind": "Reference",
              "text": "React.ForwardedRef",
              "canonicalReference": "@types/react!React.ForwardedRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            }
          ],
          "fileUrlPath": "esm/core/LabeledSelect/LabeledSelect.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "LabeledSelect"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!LabeledTextarea:var",
          "docComment": "/**\n * Textarea wrapper that allows for additional styling and labelling\n *\n * @example\n *\n * <LabeledTextarea\n *  label='Textarea Label'\n *  message='Help Message'\n *  placeholder='This is a textarea'\n * /> <LabeledTextarea label='Disabled Textarea Label' message='Help Message' placeholder='This is a textarea' disabled={true} /> <LabeledTextarea\n *  label='Textarea Label'\n *  message='Negative Message'\n *  placeholder='This is a textarea'\n *  status='negative'\n * />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LabeledTextarea: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"textarea\", "
            },
            {
              "kind": "Reference",
              "text": "LabeledTextareaProps",
              "canonicalReference": "@itwin/itwinui-react!~LabeledTextareaProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/LabeledTextarea/LabeledTextarea.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LabeledTextarea",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!LinkAction:var",
          "docComment": "/**\n * Polymorphic link action component. It is rendered as `a` by default.\n *\n * @example\n *\n * <LinkBox> <Surface> <LinkAction href='/new-page'>Whole card is clickable</LinkAction> </Surface> </LinkBox>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LinkAction: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\">"
            }
          ],
          "fileUrlPath": "esm/core/LinkAction/LinkAction.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LinkAction",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!LinkBox:var",
          "docComment": "/**\n * Polymorphic link box component. Used to wrap around your component to use LinkAction. Rendered as `div` by default\n *\n * @example\n *\n * <LinkBox> <Surface> <LinkAction href='/new-page'>Whole card is clickable</LinkAction> </Surface> </LinkBox>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LinkBox: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/LinkAction/LinkAction.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LinkBox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!List:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "List: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\">"
            }
          ],
          "fileUrlPath": "esm/core/List/List.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "List",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ListItem:var",
          "docComment": "/**\n * A generic ListItem component that can be used simply for displaying data, or as a base for the list items in a more complex component (e.g. a custom Select).\n *\n * Includes support for left/right icons, multiple lines of text, and hover/focus/active/disabled styling.\n *\n * @example\n *\n * <List> <ListItem>item 1</ListItem> <ListItem>item 2</ListItem> <ListItem>item 3</ListItem> </List>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ListItem: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ListItemOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ListItemOwnProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Content: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Description: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Action: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/List/ListItem.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ListItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!MenuDivider:var",
          "docComment": "/**\n * Divider between menu items. Should be used inside `Menu`.\n *\n * @example\n *\n * <Menu> {(close) => [ <MenuItem key={0} onClick={() => {}}> Item #1 </MenuItem>, <MenuDivider key={1} />, <MenuItem key={2} onClick={() => {}}> Item #2 </MenuItem>, ]} </Menu>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MenuDivider: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/Menu/MenuDivider.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MenuDivider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!MenuExtraContent:var",
          "docComment": "/**\n * Component that allows to have any additional content inside `Menu`.\n *\n * @example\n *\n * <Menu> {(close) => [ <MenuExtraContent key={0}> <> <Text variant='leading'>Terry Rivers</Text> terry.rivers@email.com </Text> <Select options={someOptions} /> </> </MenuExtraContent>, <MenuDivider key={1} />, <MenuItem key={2} onClick={() => {}}> Sign out </MenuItem>, ]} </Menu>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MenuExtraContent: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/Menu/MenuExtraContent.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MenuExtraContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!MenuItem:var",
          "docComment": "/**\n * Basic menu item component. Should be used inside `Menu` component for each item.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MenuItem: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "MenuItemProps",
              "canonicalReference": "@itwin/itwinui-react!~MenuItemProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Menu/MenuItem.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MenuItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!MenuItemSkeleton:var",
          "docComment": "/**\n * Menu item that uses skeletons to indicate loading state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MenuItemSkeleton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "MenuItemSkeletonProps",
              "canonicalReference": "@itwin/itwinui-react!~MenuItemSkeletonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Menu/MenuItemSkeleton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MenuItemSkeleton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!MeridiemType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MeridiemType = "
            },
            {
              "kind": "Content",
              "text": "'AM' | 'PM'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/TimePicker/TimePicker.d.ts",
          "releaseTag": "Public",
          "name": "MeridiemType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!meta:var",
          "docComment": "/**\n * Meta information about the package.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "meta: "
            },
            {
              "kind": "Content",
              "text": "{\n    version: string;\n    module: \"ESM\" | \"CJS\";\n}"
            }
          ],
          "fileUrlPath": "esm/utils/meta.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "meta",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!MiddleTextTruncation:var",
          "docComment": "/**\n * Truncates text with the ellipsis in the middle, leaving defined number of chars at the end.\n *\n * @example\n *\n * <MiddleTextTruncation text='ThisIsMyVeryLongFileName.dgn' />\n *\n * @example\n *\n * <MiddleTextTruncation text='ThisIsMyVeryLongFileName.dgn' endCharsCount={10} />\n *\n * @example\n *\n * <MiddleTextTruncation text='ThisIsMyVeryLongFileName.dgn' textRenderer={React.useCallback( (truncatedText) => <b>{truncatedText}</b>, [] )} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MiddleTextTruncation: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "MiddleTextTruncationProps",
              "canonicalReference": "@itwin/itwinui-react!~MiddleTextTruncationProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/utils/components/MiddleTextTruncation.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MiddleTextTruncation",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Modal:var",
          "docComment": "/**\n * Modal component which can wrap any content.\n *\n * @example\n *\n * <Modal isOpen={true} title='My modal' onClose={onClose} > <ModalContent> Here is my modal content </ModalContent> <ModalButtonBar> <Button styleType='high-visibility'> Primary button </Button> <Button> Secondary button </Button> </ModalButtonBar> </Modal>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Modal: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ModalProps",
              "canonicalReference": "@itwin/itwinui-react!~ModalProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Modal/Modal.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Modal",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ModalButtonBar:var",
          "docComment": "/**\n * Container for Buttons in modal.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ModalButtonBar: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/Modal/ModalButtonBar.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ModalButtonBar",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ModalContent:var",
          "docComment": "/**\n * Container for content in `Modal`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ModalContent: "
            },
            {
              "kind": "Content",
              "text": "import(\"../../utils/props.js\")."
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>"
            }
          ],
          "fileUrlPath": "esm/core/Modal/ModalContent.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ModalContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!NodeData:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NodeData<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    subNodes?: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T>;\n    nodeId: string;\n    node: T;\n    isExpanded?: boolean;\n    isDisabled?: boolean;\n    isSelected?: boolean;\n    hasSubNodes: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Tree/Tree.d.ts",
          "releaseTag": "Public",
          "name": "NodeData",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!NodeRenderProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NodeRenderProps<T> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@itwin/itwinui-react!NodeData:type"
            },
            {
              "kind": "Content",
              "text": "<T>, 'subNodes'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Tree/Tree.d.ts",
          "releaseTag": "Public",
          "name": "NodeRenderProps",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!NonIdealState:var",
          "docComment": "/**\n * A stylized display to communicate common http errors and other non-ideal states. Works well with svgs from `@itwin/itwinui-illustrations-react`.\n *\n * @example\n *\n * <NonIdealState svg={<Svg404 />} heading='Not found' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NonIdealState: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "NonIdealStateProps",
              "canonicalReference": "@itwin/itwinui-react!~NonIdealStateProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/NonIdealState/NonIdealState.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NonIdealState",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!NotificationMarker:var",
          "docComment": "/**\n * A small notification circle to the top-right of the passed children prop. This can be applied to almost anything but mostly intended for icons within buttons with `styleType = default / borderless`.\n *\n * @example\n *\n * <IconButton styleType='borderless'> <NotificationMarker> <SvgNotification /> </NotificationMarker> </IconButton>\n *\n * @example\n *\n * <NotificationMarker status='positive' pulsing={true}>Live</NotificationMarker>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NotificationMarker: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "NotificationMarkerProps",
              "canonicalReference": "@itwin/itwinui-react!~NotificationMarkerProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/NotificationMarker/NotificationMarker.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NotificationMarker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Overlay:var",
          "docComment": "/**\n * The Overlay component can be used to hide some UI while its content is loading or revalidating, and display a loading indicator on top of it.\n *\n * The hidden content gets blurred and becomes inert so it cannot be interacted with.\n *\n * @example\n *\n * <Overlay content=\"loading…\"> content beneath the overlay… (text, img, etc.) </Overlay>\n *\n * @example\n *\n * <Overlay.Wrapper> <Overlay.Overlay> loading… <Overlay.Overlay> <Overlay.HiddenContent> content beneath the overlay… (text, img, etc.) <Overlay.HiddenContent /> </Overlay.Wrapper>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Overlay: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "OverlayComponentProps",
              "canonicalReference": "@itwin/itwinui-react!~OverlayComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    HiddenContent: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Overlay: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Overlay/Overlay.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Overlay",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Popover:var",
          "docComment": "/**\n * A utility component to help with positioning of floating content relative to a trigger. Built on top of [`floating-ui`](https://floating-ui.com/).\n *\n * @example\n *\n * <Popover content='This is a popover'> <Button>Show popover</Button> </Popover>\n *\n * @see\n *\n * https://itwinui.bentley.com/docs/popover\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Popover: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "PopoverPublicProps",
              "canonicalReference": "@itwin/itwinui-react!~PopoverPublicProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Popover/Popover.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Popover",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ProgressLinear:var",
          "docComment": "/**\n * Shows progress on a linear bar\n *\n * @example\n *\n * // Determinate <ProgressLinear value={25}/> // Indeterminate <ProgressLinear indeterminate={true}/> // Labeled - Center <ProgressLinear value={50} labels={['Centered Label']} /> // Labeled - Left & Right <ProgressLinear value={50} labels={['Loading...', '50%']} /> // Status <ProgressLinear status='positive' labels={[ 'Upload done!', <Icon key='icon'> <SvgStatusSuccess />{' '} </Icon> ]} /> <ProgressLinear status='negative' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ProgressLinear: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ProgressLinearProps",
              "canonicalReference": "@itwin/itwinui-react!~ProgressLinearProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ProgressIndicators/ProgressLinear.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ProgressLinear",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ProgressRadial:var",
          "docComment": "/**\n * Circular Progress Indicator\n *\n * @example\n *\n * Basic <ProgressRadial value={50} /> Indeterminate <ProgressRadial indeterminate /> // Positive / Negative / Warning <ProgressRadial status='positive' /> <ProgressRadial status='negative' /> <ProgressRadial status='warning' /> Centered Content <ProgressRadial value={63}>63</ProgressRadial> Small <ProgressRadial size={'small'} indeterminate/>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ProgressRadial: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ProgressRadialProps",
              "canonicalReference": "@itwin/itwinui-react!~ProgressRadialProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ProgressIndicators/ProgressRadial.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ProgressRadial",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Radio:var",
          "docComment": "/**\n * Basic radio input component\n *\n * @example\n *\n * <Radio /> <Radio label='Radio' /> <Radio disabled={true} label='Radio' /> <Radio status='positive' label='Positive' /> <Radio status='warning' label='Warning' /> <Radio status='negative' label='Negative' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Radio: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "RadioProps",
              "canonicalReference": "@itwin/itwinui-react!~RadioProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Radio/Radio.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Radio",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!RadioTile:var",
          "docComment": "/**\n * RadioTile component to be used in RadioTileGroup component\n *\n * @example\n *\n * <RadioTile label='My tile' description='Some info' icon={<SvgSmileyHappy />} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RadioTile: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "RadioTileProps",
              "canonicalReference": "@itwin/itwinui-react!~RadioTileProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/RadioTiles/RadioTile.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RadioTile",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!RadioTileGroup:var",
          "docComment": "/**\n * RadioTileGroup component to group RadioTile components together\n *\n * @example\n *\n * <RadioTileGroup label='My group'> <RadioTile label='First tile' icon={<SvgSmileyHappy />} /> <RadioTile label='Second tile' icon={<SvgSmileySad />} /> </RadioTileGroup>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RadioTileGroup: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "RadioTileGroupProps",
              "canonicalReference": "@itwin/itwinui-react!~RadioTileGroupProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/RadioTiles/RadioTileGroup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RadioTileGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SearchBox:var",
          "docComment": "/**\n * SearchBox component. Can be used to implement search functionality for pages, tables and more.\n *\n * @example\n *\n * <SearchBox inputProps={{ placeholder: 'Basic search' }}/>\n *\n * @example\n *\n * <SearchBox expandable inputProps={{ placeholder: 'Expandable search' }}/>\n *\n * @example\n *\n * <SearchBox> <SearchBox.CollapsedState /> <SearchBox.ExpandedState> <SearchBox.Icon /> <SearchBox.Input /> <SearchBox.CollapseButton /> </SearchBox.ExpandedState> </SearchBox>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SearchBox: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "SearchBoxOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~SearchBoxOwnProps:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "InputFlexContainerProps",
              "canonicalReference": "@itwin/itwinui-react!~InputFlexContainerProps_2:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Icon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "IconProps",
              "canonicalReference": "@itwin/itwinui-react!~IconProps_2:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Input: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", {}>;\n    Button: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IconButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    CollapseButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IconButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    ExpandButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "IconButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~IconButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    ExpandedState: {\n        ({ children, }: {\n            children: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n        }): "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n        displayName: string;\n    };\n    CollapsedState: {\n        ({ children, }: {\n            children?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n        }): "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n        displayName: string;\n    };\n}"
            }
          ],
          "fileUrlPath": "esm/core/SearchBox/SearchBox.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SearchBox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 33
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!Select:function(1)",
          "docComment": "/**\n * Select component to select value from options. Generic type is used for value. It prevents you from mistakenly using other types in `options`, `value` and `onChange`.\n *\n * @example\n *\n * <caption>Basic select.</caption> <Select options={[ { value: '1', label: 'Option 1' }, { value: '2', label: 'Option 2' }, { value: '3', label: 'Option 3' }, ]} />\n *\n * @example\n *\n * <caption>Native select.</caption> <Select native options={[ { value: '1', label: 'Option 1' }, { value: '2', label: 'Option 2' }, { value: '3', label: 'Option 3' }, ]} />\n *\n * @example\n *\n * <caption>Disabled select with placeholder.</caption> <Select disabled={true} placeholder='Placeholder text' options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]} />\n *\n * @example\n *\n * <caption>Select with selected value and change handler.</caption> <Select value={selectedValue} onChange={(value) => setSelectedValue(value)} options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]} />\n *\n * @example\n *\n * <caption>Select using custom renderers for menu items and selected value.</caption> <Select options={[ { value: 'yellow', label: 'Yellow' }, { value: 'green', label: 'Green' }, { value: 'red', label: 'Red' }, ]} value={selectedValue} placeholder='Placeholder text' itemRenderer={(option, itemProps) => ( <MenuItem style={{ color: option.value }} isSelected={itemProps.isSelected} onClick={() => { setSelectedValue(option.value); itemProps.close(); }} role='option' ref={(el) => itemProps.isSelected && el?.scrollIntoView()} > {option.label} </MenuItem> )} selectedItemRenderer={(option) => ( <span style={{ backgroundColor: option.value }}>{option.label}</span> )} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Select: <T>(props: "
            },
            {
              "kind": "Reference",
              "text": "SelectProps",
              "canonicalReference": "@itwin/itwinui-react!~SelectProps:type"
            },
            {
              "kind": "Content",
              "text": "<T> & {\n    ref?: "
            },
            {
              "kind": "Reference",
              "text": "React.ForwardedRef",
              "canonicalReference": "@types/react!React.ForwardedRef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            }
          ],
          "fileUrlPath": "esm/core/Select/Select.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Select"
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!SelectionColumn:function(1)",
          "docComment": "/**\n * Selection column that adds selection checkbox column to the Table. It is recommended to use it as the first column.\n *\n * @example\n *\n * const isCheckboxDisabled = useCallback((rowData) => { return rowData.name === 'Name1'; }, []); const columns = useMemo(() => [ SelectionColumn({ isDisabled: isCheckboxDisabled }), // Rest of your columns ], [isCheckboxDisabled]);\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SelectionColumn: <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ">(props?: "
            },
            {
              "kind": "Content",
              "text": "{\n    isDisabled?: (rowData: T) => boolean;\n    density?: \"default\" | \"condensed\" | \"extra-condensed\";\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "{\n    id: string;\n    disableResizing: boolean;\n    disableGroupBy: boolean;\n    disableReordering: boolean;\n    minWidth: number;\n    width: number;\n    maxWidth: number;\n    columnClassName: string;\n    cellClassName: string;\n    Header: ({ getToggleAllRowsSelectedProps, toggleAllRowsSelected, rows, preFilteredFlatRows, state, }: "
            },
            {
              "kind": "Reference",
              "text": "HeaderProps",
              "canonicalReference": "@itwin/itwinui-react!~HeaderProps_2:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    Cell: ({ row, selectSubRows }: "
            },
            {
              "kind": "Reference",
              "text": "CellProps",
              "canonicalReference": "@itwin/itwinui-react!~CellProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    cellRenderer: (props: "
            },
            {
              "kind": "Reference",
              "text": "CellRendererProps",
              "canonicalReference": "@itwin/itwinui-react!~CellRendererProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/columns/selectionColumn.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SelectionColumn"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!SelectOption:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SelectOption<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    label: string;\n    sublabel?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    size?: 'default' | 'large';\n    value: T;\n    icon?: "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    startIcon?: "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    disabled?: boolean;\n    [key: string]: unknown;\n} & "
            },
            {
              "kind": "Reference",
              "text": "CommonProps",
              "canonicalReference": "@itwin/itwinui-react!~CommonProps:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Select/Select.d.ts",
          "releaseTag": "Public",
          "name": "SelectOption",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!SelectValueChangeEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SelectValueChangeEvent = "
            },
            {
              "kind": "Content",
              "text": "'added' | 'removed'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Select/Select.d.ts",
          "releaseTag": "Public",
          "name": "SelectValueChangeEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SidenavButton:var",
          "docComment": "/**\n * Wrapper around Button to be used as SideNavigation items. Label is hidden when sidenav is collapsed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SidenavButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "SidenavButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~SidenavButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/SideNavigation/SidenavButton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SidenavButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SideNavigation:var",
          "docComment": "/**\n * Left side navigation menu component.\n *\n * Renders a `<nav>` landmark, which can be labelled using `wrapperProps['aria-labelledby']` or `wrapperProps['aria-label']`.\n *\n * @example\n *\n * <SideNavigation items={[ <SidenavButton startIcon={<SvgPlaceholder />}>App 1</SidenavButton>, <SidenavButton startIcon={<SvgPlaceholder />}>App 2</SidenavButton>, <SidenavButton startIcon={<SvgPlaceholder />}>App 3</SidenavButton>, ]} secondaryItems={[ <SidenavButton startIcon={<SvgSettings />}>Settings</SidenavButton>, ]} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SideNavigation: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "SideNavigationProps",
              "canonicalReference": "@itwin/itwinui-react!~SideNavigationProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/SideNavigation/SideNavigation.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SideNavigation",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SidenavSubmenu:var",
          "docComment": "/**\n * Subcomponent to be used in the `submenu` prop of `SideNavigation`.\n *\n * @example\n *\n * <SidenavSubmenu> <SidenavSubmenuHeader>Documents</SidenavSubmenuHeader> <div> ... </div> </SidenavSubmenu>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SidenavSubmenu: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\">"
            }
          ],
          "fileUrlPath": "esm/core/SideNavigation/SidenavSubmenu.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SidenavSubmenu",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SidenavSubmenuHeader:var",
          "docComment": "/**\n * Header content for `SidenavSubmenu`. Supports truncated label and actions buttons.\n *\n * @example\n *\n * <SidenavSubmenuHeader actions={ <IconButton styleType='borderless' onClick={() => {}} aria-label='Settings'> <SvgSettings /> </IconButton> }> <IconButton styleType='borderless' onClick={() => {}} aria-label='Back'> <SvgCaretLeft /> </IconButton> <span>Documents</span> </SidenavSubmenuHeader>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SidenavSubmenuHeader: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "SidenavSubmenuHeaderProps",
              "canonicalReference": "@itwin/itwinui-react!~SidenavSubmenuHeaderProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/SideNavigation/SidenavSubmenuHeader.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SidenavSubmenuHeader",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SkipToContentLink:var",
          "docComment": "/**\n * `SkipToContentLink` is for screen reader and keyboard users and will not be visible unless tabbed to. Provides a shortcut to the main content of the page without navigating through the header, etc. Should be placed just inside the body. Set `href` to the id of your main content component. Don't forget the `#`!\n *\n * @example\n *\n * <body><SkipToContentLink href='#main-content-id' /> ... </body> <body><SkipToContentLink href='#main-content-id'>{localizedLabel}</SkipToContentLink> ... </body>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SkipToContentLink: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\", "
            },
            {
              "kind": "Reference",
              "text": "SkipToContentLinkProps",
              "canonicalReference": "@itwin/itwinui-react!~SkipToContentLinkProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/SkipToContentLink/SkipToContentLink.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SkipToContentLink",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Slider:var",
          "docComment": "/**\n * Slider component that display Thumbs for each value specified along a Rail.\n *\n * @example\n *\n * <Slider values={[10]} min={0} max={60} disabled /> <Slider values={[10, 20]} min={0} max={50} step={2} /> <Slider values={[10, 20, 30, 40]} min={0} max={60} thumbMode='allow-crossing' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Slider: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "SliderProps",
              "canonicalReference": "@itwin/itwinui-react!~SliderProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Slider/Slider.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Slider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!SplitButton:var",
          "docComment": "/**\n * Split button component with a DropdownMenu.\n *\n * The delegated props and forwarded ref are passed onto the primary button. It also supports using the `as` prop to change which element is rendered.\n *\n * @example\n *\n * const menuItems = (close: () => void) => [ <MenuItem key={1} onClick={onClick(1, close)}>Item #1</MenuItem>, <MenuItem key={2} onClick={onClick(2, close)}>Item #2</MenuItem>, ]; <SplitButton onClick={onClick} menuItems={menuItems}>Default</SplitButton> <SplitButton onClick={onClick} menuItems={menuItems} styleType='high-visibility'>High visibility</SplitButton>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SplitButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "SplitButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~SplitButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Buttons/SplitButton.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SplitButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!StatusMessage:var",
          "docComment": "/**\n * Component to display icon and text below the form field.\n *\n * @example\n *\n * <StatusMessage>This is the text</StatusMessage> <StatusMessage startIcon={<SvgStar />}>This is the text</StatusMessage>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StatusMessage: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "StatusMessageProps",
              "canonicalReference": "@itwin/itwinui-react!~StatusMessageProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/StatusMessage/StatusMessage.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "StatusMessage",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Stepper:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Stepper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "StepperProps",
              "canonicalReference": "@itwin/itwinui-react!~StepperProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Stepper/Stepper.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Stepper",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!StepperLocalization:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StepperLocalization = "
            },
            {
              "kind": "Content",
              "text": "{\n    stepsCountLabel: (currentStep: number, totalSteps: number) => string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Stepper/Stepper.d.ts",
          "releaseTag": "Public",
          "name": "StepperLocalization",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!StepProperties:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StepProperties = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n    description?: string;\n    stepContent?: () => "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n} & "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentProps",
              "canonicalReference": "@types/react!React.ComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "<'li'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Stepper/Stepper.d.ts",
          "releaseTag": "Public",
          "name": "StepProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Surface:var",
          "docComment": "/**\n * The Surface container allows content to appear elevated through the use of a drop shadow\n *\n * @example\n *\n * <Surface>Surface Content</Surface> <Surface elevation={2}>Surface Content</Surface> <Surface> <Surface.Header>Surface Header Content</Surface.Header> <Surface.Body isPadded={true}>Surface Body Content</Surface.Body> </Surface>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Surface: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "SurfaceProps",
              "canonicalReference": "@itwin/itwinui-react!~SurfaceProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Header: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Body: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "SurfaceBodyOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~SurfaceBodyOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Surface/Surface.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Surface",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Tab:var",
          "docComment": "/**\n * Legacy Tab component. For full functionality use composition API.\n *\n * Individual tab component to be used in the `labels` prop of `Tabs`.\n *\n * @example\n *\n * const tabs = [ <Tab label='Label 1' sublabel='Description 1' />, <Tab label='Label 2' startIcon={<SvgPlaceholder />} />, ];\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LegacyTab: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "TabLegacyProps",
              "canonicalReference": "@itwin/itwinui-react!~TabLegacyProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Tabs/Tabs.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Tab",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Table:var",
          "docComment": "/**\n * Table based on [react-table](https://react-table.tanstack.com/docs/api/overview).\n *\n * **Note**: If `tableProps` or `role` is passed to `Table`, all ARIA attributes passed to `Table` will be passed to the wrapper. Else, all ARIA attributes will be passed to the inner element with `role=\"table\"`.\n *\n * ---\n *\n * @example\n *\n * const columns = React.useMemo(() => [ { id: 'name', Header: 'Name', accessor: 'name', width: 90, }, { id: 'description', Header: 'description', accessor: 'description', maxWidth: 200, }, { id: 'view', Header: 'view', Cell: () => { return <span onClick={onViewClick}>View</span> }, }, ], [onViewClick]) const data = [ { name: 'Name1', description: 'Description1' }, { name: 'Name2', description: 'Description2' }, { name: 'Name3', description: 'Description3' }, ] <Table columns={columns} data={data} emptyTableContent='No data.' isLoading={false} isSortable={true} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Table: "
            },
            {
              "kind": "Content",
              "text": "{\n    <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>>(props: "
            },
            {
              "kind": "Reference",
              "text": "TableProps",
              "canonicalReference": "@itwin/itwinui-react!~TableProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>): "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/Table.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Table",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!tableFilters:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "tableFilters: "
            },
            {
              "kind": "Content",
              "text": "{\n    TextFilter: (translatedLabels?: "
            },
            {
              "kind": "Reference",
              "text": "FilterButtonBarTranslation",
              "canonicalReference": "@itwin/itwinui-react!~FilterButtonBarTranslation:type"
            },
            {
              "kind": "Content",
              "text": ") => <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>>(props: "
            },
            {
              "kind": "Reference",
              "text": "TableFilterProps",
              "canonicalReference": "@itwin/itwinui-react!~TableFilterProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    DateRangeFilter: (options?: "
            },
            {
              "kind": "Reference",
              "text": "DateRangeFilterOptions",
              "canonicalReference": "@itwin/itwinui-react!DateRangeFilterOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>>(props: "
            },
            {
              "kind": "Reference",
              "text": "TableFilterProps",
              "canonicalReference": "@itwin/itwinui-react!~TableFilterProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NumberRangeFilter: (translatedLabels?: "
            },
            {
              "kind": "Reference",
              "text": "NumberRangeTranslation",
              "canonicalReference": "@itwin/itwinui-react!~NumberRangeTranslation:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "FilterButtonBarTranslation",
              "canonicalReference": "@itwin/itwinui-react!~FilterButtonBarTranslation:type"
            },
            {
              "kind": "Content",
              "text": ") => <T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>>(props: "
            },
            {
              "kind": "Reference",
              "text": "NumberRangeFilterProps",
              "canonicalReference": "@itwin/itwinui-react!~NumberRangeFilterProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "esm/core/Table/filters/tableFilters.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "tableFilters",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 28
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@itwin/itwinui-react!TableFilterValue:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TableFilterValue<T extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "esm/core/Table/filters/types.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "TableFilterValue",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@itwin/itwinui-react!TableFilterValue#fieldType:member",
              "docComment": "/**\n * Type of the column field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fieldType: "
                },
                {
                  "kind": "Reference",
                  "text": "FieldType",
                  "canonicalReference": "@itwin/itwinui-react!~FieldType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fieldType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@itwin/itwinui-react!TableFilterValue#filterType:member",
              "docComment": "/**\n * Type of the filter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filterType: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterType",
                  "canonicalReference": "@itwin/itwinui-react!~FilterType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "filterType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@itwin/itwinui-react!TableFilterValue#id:member",
              "docComment": "/**\n * Id of the column.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@itwin/itwinui-react!TableFilterValue#value:member",
              "docComment": "/**\n * Value of the filter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!TablePaginator:function(1)",
          "docComment": "/**\n * Table paginator component. Recommended to pass to the `Table` as `paginatorRenderer` prop. Passing `props` from `paginatorRenderer` handles all state management and is enough for basic use-cases.\n *\n * @example\n *\n * <Table // ... paginatorRenderer={(props) => <TablePaginator {...props} />} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TablePaginator: (props: "
            },
            {
              "kind": "Reference",
              "text": "TablePaginatorProps",
              "canonicalReference": "@itwin/itwinui-react!~TablePaginatorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "esm/core/Table/TablePaginator.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "TablePaginator"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!TablePaginatorRendererProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TablePaginatorRendererProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    currentPage: number;\n    totalRowsCount: number;\n    pageSize: number;\n    onPageChange: (page: number) => void;\n    onPageSizeChange: (size: number) => void;\n    size?: 'default' | 'small';\n    isLoading?: boolean;\n    totalSelectedRowsCount?: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Table/Table.d.ts",
          "releaseTag": "Public",
          "name": "TablePaginatorRendererProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Tabs:var",
          "docComment": "/**\n * Tabs organize and allow navigation between groups of content that are related and at the same level of hierarchy. `Tabs.Tab` and `Tabs.Panel` can be associated with each other by passing them the same `value`.\n *\n * @example\n *\n * <Tabs.Wrapper> <Tabs.TabList> <Tabs.Tab value='tab1' label='Label 1' /> <Tabs.Tab value='tab2' label='Label 2' /> <Tabs.Tab value='tab3' label='Label 3' /> </Tabs.TabList> <Tabs.Actions> <Button>Sample Button</Button> </Tabs.Actions> <Tabs.Panel value='tab1'>Content 1</Tabs.Panel> <Tabs.Panel value='tab2'>Content 2</Tabs.Panel> <Tabs.Panel value='tab3'>Content 3</Tabs.Panel> </Tabs.Wrapper>\n *\n * @example\n *\n * <Tabs orientation='vertical'/>\n *\n * @example\n *\n * <Tabs.Wrapper focusActivationMode='manual'> <Tabs.Tab value='sample'> <Tabs.TabIcon> <SvgPlaceholder /> </Tabs.TabIcon> <Tabs.TabLabel>Sample Label</Tabs.TabLabel> <Tabs.TabDescription>Sample Description</Tabs.TabDescription> </Tabs.Tab> </Tabs.Wrapper>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Tabs: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabsLegacyProps",
              "canonicalReference": "@itwin/itwinui-react!~TabsLegacyProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabsWrapperOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabsWrapperOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    TabList: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabListOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabListOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Tab: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "TabOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    TabIcon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"fill\" | \"as\" | \"key\" | \"size\" | keyof "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": "> | \"padded\"> & {\n        size?: \"auto\" | \"small\" | \"medium\" | \"large\" | import(\"../../utils/types.js\")."
            },
            {
              "kind": "Reference",
              "text": "AnyString",
              "canonicalReference": "@itwin/itwinui-react!~AnyString_2:type"
            },
            {
              "kind": "Content",
              "text": ";\n        fill?: \"default\" | \"positive\" | \"informational\" | \"negative\" | \"warning\" | import(\"../../utils/types.js\")."
            },
            {
              "kind": "Reference",
              "text": "AnyString",
              "canonicalReference": "@itwin/itwinui-react!~AnyString_2:type"
            },
            {
              "kind": "Content",
              "text": ";\n        padded?: boolean;\n    } & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement",
              "canonicalReference": "!HTMLSpanElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"ref\"> & {\n        as?: \"span\" | undefined;\n    }>;\n    TabLabel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    TabDescription: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Actions: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabsActionsOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabsActionsOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Panel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabsPanelOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabsPanelOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Tabs/Tabs.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Tabs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 59
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Tag:var",
          "docComment": "/**\n * Tag for showing categories, filters etc.\n *\n * @example\n *\n * <Tag onRemove={() => alert('Closed a tag!')}>I'm a tag</Tag> <Tag variant='basic'>Basic tag</Tag>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Tag: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "TagProps",
              "canonicalReference": "@itwin/itwinui-react!~TagProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Tag/Tag.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Tag",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!TagContainer:var",
          "docComment": "/**\n * TagContainer for grouping tags.\n *\n * @example\n *\n * <TagContainer><Tag>Tag 1</Tag><Tag>Tag 2</Tag></TagContainer> <TagContainer><Tag variant='basic'>Basic tag</Tag><Tag variant='basic'>Basic tag 2</Tag></TagContainer>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TagContainer: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TagContainerProps",
              "canonicalReference": "@itwin/itwinui-react!~TagContainerProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Tag/TagContainer.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TagContainer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Text_2:var",
          "docComment": "/**\n * Polymorphic typography component to render any kind of text as any kind of element. Users should decide which element to render based on the context of their app. Link to heading levels docs: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#accessibility_concerns\n *\n * @example\n *\n * <Text>Some normal paragraph text rendered as a div</Text>\n *\n * @example\n *\n * <Text variant='title' as='h3'>I'm some h2 text rendered as an h3 element!</Text>\n *\n * @example\n *\n * <Text isMuted>Some muted text.</Text> <Text isSkeleton>Skeleton text</Text>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Text: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TextProps",
              "canonicalReference": "@itwin/itwinui-react!~TextProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Typography/Text.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Text_2",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Textarea:var",
          "docComment": "/**\n * Basic textarea component\n *\n * @example\n *\n * <Textarea placeholder='This is a textarea' /> <Textarea disabled={true} placeholder='This is a disabled textarea' />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Textarea: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"textarea\", "
            },
            {
              "kind": "Reference",
              "text": "TextareaProps",
              "canonicalReference": "@itwin/itwinui-react!~TextareaProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Textarea/Textarea.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Textarea",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ThemeProvider:var",
          "docComment": "/**\n * This component provides global state and applies theme to the entire tree that it is wrapping around.\n *\n * The `theme` prop defaults to \"inherit\", which looks upwards for closest ThemeProvider and falls back to \"light\" theme if one is not found.\n *\n * If you want to theme the entire app, you should use this component at the root. You can also use this component to apply a different theme to only a part of the tree.\n *\n * By default, the topmost `ThemeProvider` in the tree will apply the recommended `background-color`. You can override this behavior using `themeOptions.applyBackground`.\n *\n * @example\n *\n * <ThemeProvider theme='os'> <App /> </ThemeProvider>\n *\n * @example\n *\n * <ThemeProvider as='body'> <App /> </ThemeProvider>\n *\n * @example\n *\n * <ThemeProvider theme='dark' themeOptions={{ applyBackground: false }}> <App /> </ThemeProvider>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ThemeProvider: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "ThemeProviderOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~ThemeProviderOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ThemeProvider/ThemeProvider.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ThemeProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!ThemeType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ThemeType = "
            },
            {
              "kind": "Content",
              "text": "'light' | 'dark' | 'os'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/ThemeProvider/ThemeProvider.d.ts",
          "releaseTag": "Public",
          "name": "ThemeType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Tile:var",
          "docComment": "/**\n * Tile with customizable Thumbnail, Name, Content and Buttons subcomponents\n *\n * @example\n *\n * <Tile.Wrapper> <Tile.ThumbnailArea> <Tile.ThumbnailPicture/> <Tile.Badge/> <Tile.TypeIndicator/> <Tile.QuickAction/> </Tile.ThumbnailArea> <Tile.Name> <Tile.NameIcon/> <Tile.NameLabel/> </Tile.Name> <Tile.ContentArea> <Tile.Description /> <Tile.Metadata/> <Tile.MoreOptions/> </Tile.ContentArea> <Tile.Buttons/> </Tile.Wrapper>\n *\n * @example\n *\n * <Tile name='Tile name' description='Tile description that takes upto 3 lines' metadata={<TagContainer><Tag variant='basic'>Tag 1</Tag></TagContainer>} thumbnail='/url/to/image.jpg' badge={<Badge backgroundColor='blue'>Badge label</Badge>} buttons={[<Button>Button 1</Button>, <Button>Button 2</Button>]} moreOptions={[<MenuItem>Item 1</MenuItem>, <MenuItem>Item 2</MenuItem>]} leftIcon={<IconButton><SvgInfo /></IconButton>} rightIcon={<IconButton><SvgStar /></IconButton>} isSelected={true} isNew={false} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Tile: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TileLegacyProps",
              "canonicalReference": "@itwin/itwinui-react!~TileLegacyProps:type"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TileWrapperOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TileWrapperOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    ThumbnailArea: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    ThumbnailPicture: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TileThumbnailPictureOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TileThumbnailPictureOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    QuickAction: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    TypeIndicator: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    BadgeContainer: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    IconButton: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ButtonHTMLAttributes",
              "canonicalReference": "@types/react!React.ButtonHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"label\" | \"title\" | \"as\" | \"size\" | \"htmlDisabled\" | \"styleType\" | \"labelProps\" | \"stretched\" | \"isActive\" | \"iconProps\"> & {\n        isActive?: boolean;\n        label?: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n        labelProps?: "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ComponentPropsWithoutRef",
              "canonicalReference": "@types/react!React.ComponentPropsWithoutRef:type"
            },
            {
              "kind": "Content",
              "text": "<typeof import(\"../Tooltip/Tooltip.js\")."
            },
            {
              "kind": "Reference",
              "text": "Tooltip",
              "canonicalReference": "@itwin/itwinui-react!Tooltip"
            },
            {
              "kind": "Content",
              "text": ">, \"content\" | \"reference\" | \"ariaStrategy\" | \"children\">;\n        iconProps?: "
            },
            {
              "kind": "Reference",
              "text": "React.ComponentProps",
              "canonicalReference": "@types/react!React.ComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "<\"span\">;\n        title?: string;\n    } & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"../Buttons/Button.js\")."
            },
            {
              "kind": "Reference",
              "text": "ButtonProps",
              "canonicalReference": "@itwin/itwinui-react!~ButtonProps:type"
            },
            {
              "kind": "Content",
              "text": ", \"loading\" | \"startIcon\" | \"endIcon\" | \"labelProps\" | \"startIconProps\" | \"endIconProps\"> & {\n        as?: \"button\" | undefined;\n    }, \"ref\">>;\n    Name: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TileNameOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TileNameOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    NameIcon: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    NameLabel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", {}>;\n    Action: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"a\", {}>;\n    ContentArea: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Description: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    Metadata: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n    MoreOptions: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TileMoreOptionsOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TileMoreOptionsOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Buttons: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Tile/Tile.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Tile",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 71
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!TimePicker:var",
          "docComment": "/**\n * Time picker component\n *\n * @example\n *\n * <TimePicker date={new Date()} onChange={(e) => console.log('New time value: ' + e)} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TimePicker: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TimePickerProps",
              "canonicalReference": "@itwin/itwinui-react!~TimePickerProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/TimePicker/TimePicker.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TimePicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@itwin/itwinui-react!TitleTranslations:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TitleTranslations = "
            },
            {
              "kind": "Content",
              "text": "{\n    termsOfService?: string;\n    privacy?: string;\n    termsOfUse?: string;\n    cookies?: string;\n    legalNotices?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "esm/core/Footer/Footer.d.ts",
          "releaseTag": "Public",
          "name": "TitleTranslations",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!ToggleSwitch:var",
          "docComment": "/**\n * A switch for turning on and off.\n *\n * @example\n *\n * <caption>Basic toggle</caption> <ToggleSwitch onChange={(e) => console.log(e.target.checked)} defaultChecked />\n *\n * @example\n *\n * <caption>Disabled toggle</caption> <ToggleSwitch disabled />\n *\n * @example\n *\n * <caption>Right labeled toggle</caption> <ToggleSwitch defaultChecked label='Right labeled' />\n *\n * @example\n *\n * <caption>Left labeled toggle</caption> <ToggleSwitch defaultChecked label='Left labeled' labelPosition='left' />\n *\n * @example\n *\n * <caption>Toggle with icon</caption> <ToggleSwitch label='With icon toggle' icon={<svg viewBox='0 0 16 16'><path d='M1 1v14h14V1H1zm13 1.7v10.6L8.7 8 14 2.7zM8 7.3L2.7 2h10.6L8 7.3zm-.7.7L2 13.3V2.7L7.3 8zm.7.7l5.3 5.3H2.7L8 8.7z' /></svg>} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToggleSwitch: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"input\", "
            },
            {
              "kind": "Reference",
              "text": "ToggleSwitchProps",
              "canonicalReference": "@itwin/itwinui-react!~ToggleSwitchProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/ToggleSwitch/ToggleSwitch.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ToggleSwitch",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Tooltip:var",
          "docComment": "/**\n * Basic tooltip component to display informative content when an element is hovered or focused. Uses [FloatingUI](https://floating-ui.com/).\n *\n * @example\n *\n * <Tooltip content='tooltip text' placement='top'>Hover here</Tooltip>\n *\n * @example\n *\n * const [trigger, setTrigger] = React.useState(null); ... <Button ref={setTrigger} /> <Tooltip content='tooltip text' reference={trigger} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Tooltip: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TooltipOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TooltipOwnProps:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TooltipOptions",
              "canonicalReference": "@itwin/itwinui-react!~TooltipOptions:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Tooltip/Tooltip.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Tooltip",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!TransferList:var",
          "docComment": "/**\n * The TransferList component is used to display a list within a box\n *\n * @example\n *\n * <TransferList> <TransferList.ListboxWrapper> <TransferList.Listbox> <TransferList.Item>Item 1</TransferList.Item> <TransferList.Item>Item 2</TransferList.Item> <TransferList.Item>Item 3</TransferList.Item> <TransferList.Item>Item 4</TransferList.Item> <TransferList.Item>Item 5</TransferList.Item> <TransferList.Item>Item 6</TransferList.Item> </TransferList.Listbox> </TransferList.ListboxWrapper> </TransferList>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TransferList: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", {}> & {\n    ListboxWrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TransferListListboxWrapperOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TransferListListboxWrapperOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Listbox: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"ul\", "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.DetailedHTMLProps",
              "canonicalReference": "@types/react!React.DetailedHTMLProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, "
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, \"as\"> & {\n        as?: \"div\" | undefined;\n    }>;\n    Item: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"li\", "
            },
            {
              "kind": "Reference",
              "text": "TransferListItemOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TransferListItemOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    ListboxLabel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TransferListListboxLabelOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TransferListListboxLabelOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Toolbar: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", object>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/TransferList/TransferList.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TransferList",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 29
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!Tree:var",
          "docComment": "/**\n * Tree component used to display a hierarchical structure of `TreeNodes`. User should control state of expanded, selected and disabled nodes using `getNode` prop.\n *\n * @example\n *\n * type DemoData = { id: string; label: string; subItems: DemoData[]; };\n *\n * const data: Array<DemoData> = [ { id: 'Node-1', label: 'Facility 1', subItems: [{ id: 'Node-1-1', label: 'Unit 1', subItems: [] }], }, { id: 'Node-2', label: 'Facility 2', subItems: [{ id: 'Node-2-1', label: 'Unit 2', subItems: [] }], }, ];\n *\n * const [expandedNodes, setExpandedNodes] = React.useState<Record<string, boolean>>({}); const onNodeExpanded = React.useCallback((nodeId: string, isExpanded: boolean) => { setExpandedNodes((oldExpanded) => ({ ...oldExpanded, [nodeId]: isExpanded })); }, []);\n *\n * const getNode = React.useCallback((node: DemoData): NodeData<DemoData> => { return { subNodes: node.subItems, nodeId: node.id, node, isExpanded: expandedNodes[node.id], hasSubNodes: node.subItems.length > 0, }; }, [expandedNodes]);\n *\n * <Tree<DemoData> data={data} getNode={getNode} nodeRenderer={React.useCallback(({ node, ...rest }) => ( <TreeNode label={node.label} onNodeExpanded={onNodeExpanded} {...rest} /> ), [onNodeExpanded])} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Tree: "
            },
            {
              "kind": "Content",
              "text": "{\n    <T>(props: "
            },
            {
              "kind": "Reference",
              "text": "TreeProps",
              "canonicalReference": "@itwin/itwinui-react!~TreeProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>): "
            },
            {
              "kind": "Reference",
              "text": "React.JSX.Element",
              "canonicalReference": "@types/react!React.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Tree/Tree.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "Tree",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!TreeNode:var",
          "docComment": "/**\n * `TreeNode` component to display node content within a `Tree`. Must be used inside `Tree` component to correctly set node `depth` and `subNodes`.\n *\n * @example\n *\n * <TreeNode nodeId={props.nodeId} label={props.node.label} sublabel={props.node.sublabel} onExpanded={onExpanded} onSelected={onSelectedNodeChange} isDisabled={props.isDisabled} isExpanded={props.isExpanded} isSelected={props.isSelected} checkbox={ <Checkbox variant='eyeball' disabled={props.isDisabled} /> } icon={<SvgPlaceholder />} />\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TreeNode: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeProps",
              "canonicalReference": "@itwin/itwinui-react!~TreeNodeProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Tree/TreeNode.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TreeNode",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!TreeNodeExpander:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TreeNodeExpander: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeExpanderProps",
              "canonicalReference": "@itwin/itwinui-react!~TreeNodeExpanderProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Tree/TreeNodeExpander.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TreeNodeExpander",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!unstable_Panels:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Panels: "
            },
            {
              "kind": "Content",
              "text": "{\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "PanelsWrapperProps",
              "canonicalReference": "@itwin/itwinui-react!~PanelsWrapperProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Panel: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "PanelProps",
              "canonicalReference": "@itwin/itwinui-react!~PanelProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Trigger: {\n        (props: "
            },
            {
              "kind": "Reference",
              "text": "PanelTriggerProps",
              "canonicalReference": "@itwin/itwinui-react!~PanelTriggerProps:type"
            },
            {
              "kind": "Content",
              "text": "): string | number | bigint | true | "
            },
            {
              "kind": "Reference",
              "text": "React.ReactElement",
              "canonicalReference": "@types/react!React.ReactElement:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, string | "
            },
            {
              "kind": "Reference",
              "text": "React.JSXElementConstructor",
              "canonicalReference": "@types/react!React.JSXElementConstructor:type"
            },
            {
              "kind": "Content",
              "text": "<any>> | "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string | number | bigint | boolean | "
            },
            {
              "kind": "Reference",
              "text": "React.ReactPortal",
              "canonicalReference": "@types/react!React.ReactPortal:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "React.ReactElement",
              "canonicalReference": "@types/react!React.ReactElement:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, string | "
            },
            {
              "kind": "Reference",
              "text": "React.JSXElementConstructor",
              "canonicalReference": "@types/react!React.JSXElementConstructor:type"
            },
            {
              "kind": "Content",
              "text": "<any>> | "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": "> | null | undefined> | null;\n        displayName: string;\n    };\n    Header: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "PanelHeaderProps",
              "canonicalReference": "@itwin/itwinui-react!~PanelHeaderProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    useInstance: () => "
            },
            {
              "kind": "Reference",
              "text": "PanelsInstance",
              "canonicalReference": "@itwin/itwinui-react!~PanelsInstance:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "esm/core/Panels/Panels.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "unstable_Panels",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 38
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!unstable_TabsPresentation:var",
          "docComment": "/**\n * Presentational version of `Tabs`. It renders purely static elements, without any associated behaviors.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "unstable_TabsPresentation: "
            },
            {
              "kind": "Content",
              "text": "{\n    Wrapper: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabsWrapperPresentationOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabsWrapperPresentationOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    TabList: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"div\", "
            },
            {
              "kind": "Reference",
              "text": "TabListPresentationOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~TabListPresentationOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    Tab: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"button\", {}>;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Tabs/Tabs.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "unstable_TabsPresentation",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@itwin/itwinui-react!useToaster:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useToaster: () => "
            },
            {
              "kind": "Content",
              "text": "{\n    positive: (content: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "ToastOptions",
              "canonicalReference": "@itwin/itwinui-react!~ToastOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n        close: () => void;\n    };\n    informational: (content: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "ToastOptions",
              "canonicalReference": "@itwin/itwinui-react!~ToastOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n        close: () => void;\n    };\n    negative: (content: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "ToastOptions",
              "canonicalReference": "@itwin/itwinui-react!~ToastOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n        close: () => void;\n    };\n    warning: (content: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "ToastOptions",
              "canonicalReference": "@itwin/itwinui-react!~ToastOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n        close: () => void;\n    };\n    closeAll: () => void;\n    setSettings: (settings: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToasterSettings",
              "canonicalReference": "@itwin/itwinui-react!~ToasterSettings:type"
            },
            {
              "kind": "Content",
              "text": ">) => void;\n}"
            }
          ],
          "fileUrlPath": "esm/core/Toast/Toaster.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 22
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useToaster"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!VisuallyHidden:var",
          "docComment": "/**\n * Hides content visually but keeps it still accessible to screen readers and other assistive technologies.\n *\n * @example\n *\n * <div aria-hidden='true'>★★★☆☆</div> <VisuallyHidden>3 stars out of 5</VisuallyHidden>\n *\n * @see\n *\n * https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VisuallyHidden: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"span\", "
            },
            {
              "kind": "Reference",
              "text": "VisuallyHiddenOwnProps",
              "canonicalReference": "@itwin/itwinui-react!~VisuallyHiddenOwnProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/VisuallyHidden/VisuallyHidden.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VisuallyHidden",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@itwin/itwinui-react!WorkflowDiagram:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "WorkflowDiagram: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicForwardRefComponent",
              "canonicalReference": "@itwin/itwinui-react!~PolymorphicForwardRefComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<\"ol\", "
            },
            {
              "kind": "Reference",
              "text": "WorkflowDiagramProps",
              "canonicalReference": "@itwin/itwinui-react!~WorkflowDiagramProps:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "esm/core/Stepper/WorkflowDiagram.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "WorkflowDiagram",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        }
      ]
    }
  ]
}
