{
  // Place your iTwinUI workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Separator": {
    "prefix": "//-",
    "body": [
      "// ------------------------------------------------------------------------------------------------",
      "$1"
    ],
    "description": "Creates a separator comment"
  },
  "Component": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "component",
    "body": [
      "function ${1:Name}({ ${2:props} }) {",
      "	return (",
      "		${3:jsx}",
      "	);",
      "}"
    ],
    "description": "React Component boilerplate"
  },
  "iTwinUIComponent": {
    "scope": "typescriptreact",
    "prefix": "iuicomponent",
    "body": [
      "const ${1:Name} = React.forwardRef((props, forwardedRef) => {",
      " const {${2:props}} = props",
      "",
      " return (",
      "   ${3:jsx}",
      " );",
      "}) as PolymorphicForwardedRefComponent<'${4:element}', ${5:PropsType}>;"
    ]
  },
  "ImportCX": {
    "scope": "typescriptreact",
    "prefix": "importcx",
    "body": ["import cx from 'classnames';"],
    "description": "Imports the cx function from classnames"
  },
  "CX": {
    "scope": "typescriptreact",
    "prefix": "cx",
    "body": ["className={cx(${1:classNames})}"],
    "description": "Conditionaly joins class names"
  }
}
