// Copyright (c) Bentley Systems, Incorporated. All rights reserved.
// See LICENSE.md in the project root for license terms and full copyright notice.
@import '../style/index';

/// Mixin for button group or input+button combo group.
/// @arg $orientation must be one of: horizontal, vertical
/// Note: Vertical button-group should be used for icon buttons only.
@mixin iui-button-group($orientation: horizontal) {
  display: inline-flex;
  align-items: center;
  isolation: isolate;

  @if $orientation != 'horizontal' {
    flex-direction: column;
  }

  $childZindexSelector: '.iui-input-container, .iui-button, .iui-input:where(:not(.iui-input-container .iui-input))';
  $childBorderSelector: '.iui-input, .iui-button:where(:not(.iui-borderless))';
  $disabledSelector: '&:disabled, &.iui-disabled, &[aria-disabled="true"]';

  > * {
    display: flex;

    #{$childZindexSelector} {
      position: relative;

      // Adds stripe to active button
      @if $orientation == 'horizontal' {
        --_iui-button-active-stripe-inset: #{$iui-xxs} #{$iui-xxs} calc(100% - #{$iui-xs});
      } @else {
        --_iui-button-active-stripe-inset: #{$iui-xxs} calc(100% - #{$iui-xs}) #{$iui-xxs} #{$iui-xxs};
      }

      &:hover {
        z-index: 1;
      }

      &:focus,
      &:focus-within {
        z-index: 2;
      }

      #{$disabledSelector} {
        z-index: -1;
      }
    }

    #{$childBorderSelector} {
      // Reset border radius
      border-radius: 0;

      transition-duration: 0ms; // disable exit animation to avoid border flicker

      &:hover,
      &:focus {
        transition-duration: $iui-speed-fast; // re-enable enter animation
      }
    }

    // Add rounded corners to first and last items
    &:first-child {
      #{$childBorderSelector} {
        border-top-left-radius: $iui-border-radius;

        @if $orientation == 'horizontal' {
          border-bottom-left-radius: $iui-border-radius;
        } @else {
          border-top-right-radius: $iui-border-radius;
        }
      }
    }

    &:last-child {
      #{$childBorderSelector} {
        border-bottom-right-radius: $iui-border-radius;

        @if $orientation == 'horizontal' {
          border-top-right-radius: $iui-border-radius;
        } @else {
          border-bottom-left-radius: $iui-border-radius;
        }
      }
    }

    // Use negative margin to make adjacent borders overlap
    + * {
      @if $orientation == 'horizontal' {
        margin-left: -1px;
      } @else {
        margin-top: -1px;
      }
    }

    // Add slight border between disabled items
    &:not(:first-child) :where(.iui-button.iui-default) {
      #{$disabledSelector} {
        @if $orientation == 'horizontal' {
          border-left-color: var(--iui-color-background-4);
        } @else {
          border-top-color: var(--iui-color-background-4);
        }
      }
    }
  }
}
