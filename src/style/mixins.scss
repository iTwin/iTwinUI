// Copyright (c) Bentley Systems, Incorporated. All rights reserved.
// See LICENSE.md in the project root for license terms and full copyright notice.
@import './color';

@mixin no-link {
  text-decoration: none;

  @include themed {
    color: t(iui-text-color);
  }

  &:link,
  &:visited,
  &:hover,
  &:active {
    @include themed {
      color: t(iui-text-color);
    }
    text-decoration: none;
  }
}

@mixin focus-visible {
  &:focus-visible {
    @content;
  }

  @supports #{'not selector(*:focus-visible)'} {
    &:focus {
      @content;
    }
  }
}

@mixin iui-focus($color: var(--iui-color-foreground-primary), $offset: -1px, $thickness: 1px) {
  @include focus-visible {
    outline: $thickness solid $color;
    outline-offset: $offset;
  }
}

@mixin iui-reset {
  margin: 0;
  padding: 0;
  border: none;
  vertical-align: baseline;
}

@mixin iui-anchor {
  @include iui-focus($offset: 2px);
  border-radius: $iui-border-radius;
  text-decoration: none;
  cursor: pointer;
  @include themed {
    color: t(iui-color-foreground-primary);
  }

  &:hover {
    @include themed {
      color: t(iui-color-foreground-primary-overlay);
    }
    text-decoration: underline;
  }
}

@mixin iui-text-selection($status: primary) {
  &::selection,
  *::selection {
    @include themed {
      background-color: rgba(t(iui-color-foreground-#{$status}-rgb), t(iui-opacity-5));
    }
  }
}

@mixin iui-scrollbar {
  @include themed {
    scrollbar-color: rgba(t(iui-color-foreground-body-rgb), t(iui-opacity-4)) transparent;
    scrollbar-width: thin;
  }

  &::-webkit-scrollbar {
    width: $iui-s;
    height: $iui-s;
  }

  &::-webkit-scrollbar-thumb {
    @include themed {
      background-color: rgba(t(iui-color-foreground-body-rgb), t(iui-opacity-4));
    }
    border-radius: $iui-s * 0.5;

    &:hover {
      @include themed {
        background-color: rgba(t(iui-color-foreground-body-rgb), t(iui-opacity-3));
      }
    }
  }

  &::-webkit-scrollbar-track,
  &::-webkit-scrollbar-corner {
    background-color: transparent;
  }
}

@mixin iui-line-clamp($lines: 1) {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;

  @supports (-webkit-line-clamp: 1) {
    white-space: unset;
    display: -webkit-box; /* stylelint-disable-line */
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical; /* stylelint-disable-line */
  }
}

@mixin iui-blur($opacity: 4) {
  // Blur fallback
  @include themed {
    background-color: rgba(0, 0, 0, t(iui-opacity-#{$opacity - 1}));
  }

  // With blur
  @supports (backdrop-filter: $iui-blur-filter) {
    background-color: rgba(0, 0, 0, var(--iui-opacity-#{$opacity}));
    backdrop-filter: $iui-blur-filter;
  }
}

/// Simulates display: none but keeps the element in DOM tree
@mixin iui-display-none {
  opacity: 0;
  height: 0.1px;
  width: 0.1px;
  margin: 0;
  padding: 0;
}

/// Visually hides an element but keeps it accessible to screen readers.
/// Because it applies some potentially invasive styles, use this mixin on a wrapper element for best results.
/// If it contains a focusable element, make sure to revert/exclude these styles.
@mixin visually-hidden {
  clip-path: inset(50%);
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  height: 1px;
  width: 1px;
  padding: 0;
  margin: -1px;
  border-width: 0;
}

/// Reverts visually-hidden styles, making it visible again.
@mixin visually-hidden-revert {
  clip-path: revert;
  overflow: visible;
  position: static;
  white-space: normal;
  height: auto;
  width: auto;
  padding: 0;
  margin: 0;
}

/// Classes for react-transition-group
/// Used for expand/collapse transitions. Needs height/width to be set in JS.
@mixin iui-transition-group {
  $transition-rule: opacity $iui-speed-fast ease-out, width $iui-speed-fast ease-out, height $iui-speed-fast ease-out;

  &.iui-enter {
    opacity: 0;
  }

  &.iui-enter-active {
    opacity: 1;
    @media (prefers-reduced-motion: no-preference) {
      transition: $transition-rule;
    }
  }

  &.iui-exit {
    opacity: 1;
  }

  &.iui-exit-active {
    opacity: 0;
    @media (prefers-reduced-motion: no-preference) {
      transition: $transition-rule;
    }
  }
}

/// Adds the ability to toggle vertical scroll snapping by setting `.iui-scroll-snapping` as a modifier (if used inside a class) or at root level.
/// @arg $selector - selector to apply `scroll-snap-align: start` on. Defaults to '> *'
@mixin iui-scroll-snapping($selector: '> *') {
  #{if(&, '&.iui-scroll-snapping', '.iui-scroll-snapping')} {
    scroll-snap-type: y mandatory;

    #{$selector} {
      scroll-snap-align: start none;
    }
  }
}
