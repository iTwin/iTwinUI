---
const { ...props } = Astro.props;
---

<icon-button>
  <button {...props}>
    <span aria-hidden='true' class='tooltip'><slot name='tooltip' /></span>
    <slot />
  </button>
</icon-button>

<script>
  customElements.define(
    'icon-button',
    class extends HTMLElement {
      connectedCallback() {
        const button = this.querySelector('button') as HTMLButtonElement;
        const tooltip = button.querySelector('.tooltip') as HTMLElement;
        const buttonId = button.id;

        button.style.setProperty('anchor-name', `--anchor-${buttonId}`);
        tooltip.style.setProperty('position-anchor', `--anchor-${buttonId}`);
      }
    },
  );
</script>

<style lang='scss'>
  @layer components {
    button {
      display: grid;
      place-items: center;
      min-width: 2rem;
      min-height: 2rem;
      color: var(--color-text);
      background: transparent;
      border-radius: 9e9px;
      border: 1px solid transparent;
      cursor: pointer;
      padding: 0.25rem;

      &:hover {
        background: hsl(0 0% 0% / 0.2);
      }

      > :global(svg) {
        width: 1rem;
        height: 1rem;
        color: CanvasText;
      }
    }

    @position-try --fallback-tooltip-position {
      position-area: top left;
      right: anchor(right);
    }

    .tooltip {
      visibility: hidden;
      position: fixed;
      font-size: var(--type--2);
      padding: 0.5rem;
      white-space: nowrap;
      background-color: var(--color-background-2);
      border: 1px solid var(--color-line-2);
      border-radius: 4px;
      margin-block-end: 5px;

      position-area: top;
      position-try-fallbacks: --fallback-tooltip-position;

      button:is(:hover, :focus-visible, :has(:focus-visible)) > & {
        visibility: visible;
      }
    }
  }
</style>
