---
/**
 * Util file with `<style>` and `<script>` tags to support the move-on-visible animation effect
 *
 * To use this effect:
 * - Add this component to your page (ideally in a global page like _global.astro)
 * - Add class `move-on-visible`
 * - Add attribute `data-move-on-visible-direction`. Possible values = 'up' | 'down' | 'left' | 'right'
 */
---

<style is:global lang='scss'>
  .move-on-visible {
    transition-property: transform, opacity;
    transition-timing-function: ease;

    @media not (prefers-reduced-motion: reduce) {
      &[data-move-visible] {
        transform: translate(0, 0);
        transition-duration: var(--transition-speed-slow);

        opacity: 1;
      }

      &:not([data-move-visible]) {
        transition-duration: 0s;
        $max-move-value-x: 30px;
        $max-move-value-y: 30px;

        &[data-move-on-visible-direction='up'] {
          transform: translate(0, $max-move-value-y);
        }

        &[data-move-on-visible-direction='down'] {
          transform: translate(0, -$max-move-value-y);
        }

        &[data-move-on-visible-direction='left'] {
          transform: translate($max-move-value-x, 0);
          @media (max-width: 50em) {
            transform: translate(0, $max-move-value-y); // up on small screens
          }
        }

        &[data-move-on-visible-direction='right'] {
          transform: translate(-$max-move-value-x, 0);
          @media (max-width: 50em) {
            transform: translate(0, $max-move-value-y); // up on small screens
          }
        }

        opacity: 0;
      }
    }
  }
</style>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (!(entry.target instanceof HTMLElement)) {
          return;
        }

        if (entry.isIntersecting) {
          entry.target.dataset.moveVisible = 'true';
        }
      });
    },
    { threshold: [0.3] }
  );

  function removeIntersectionObserver() {
    const allMoveOnVisibles = document.querySelectorAll('.move-on-visible');
    allMoveOnVisibles.forEach((moveOnVisible) => {
      if (!(moveOnVisible instanceof HTMLElement)) {
        return;
      }

      delete moveOnVisible.dataset.moveVisible; // reset
      observer.unobserve(moveOnVisible);
    });
  }

  function addIntersectionObserver() {
    removeIntersectionObserver();

    const allMoveOnVisibles = document.querySelectorAll('.move-on-visible');
    allMoveOnVisibles.forEach((moveOnVisible) => {
      observer.observe(moveOnVisible);
    });
  }

  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  if (!prefersReducedMotion.matches) {
    addIntersectionObserver();
  }

  prefersReducedMotion.addEventListener('change', (event) => {
    if (event.matches) {
      removeIntersectionObserver();
    } else {
      addIntersectionObserver();
    }
  });
</script>
