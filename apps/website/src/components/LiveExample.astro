---
import fs from 'node:fs';
import OpenInCodesandbox from './OpenInCodesandbox.astro';
import { Code } from 'astro/components';
import nightOwl from '../../nightOwl.mjs';
import { ThemeProvider } from '@itwin/itwinui-react';
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);

export type Props = {
  /** name of the file to read code example from, should be located in ~/examples folder */
  src: string;

  /**
   * whether the first code snippet will truncate and turn into an expandable disclosure.
   * @default true
   */
  truncate?: boolean;
};

const { src, truncate = true } = Astro.props;

const codePath = require.resolve(`examples/${src}`);
let code = await fs.promises.readFile(codePath, 'utf8');

// strip copyright header (first 4 lines)
if (code.includes('Copyright (c) Bentley Systems')) {
  code = code.split('\n').slice(4).join('\n');
}
---

<div class='demo-box'>
  <slot />
  <OpenInCodesandbox class='sandbox-link' code={code} />
</div>
<demo-code>
  {truncate && <button aria-expanded='false'>Toggle full code</button>}
  <Code code={code} lang='tsx' theme={nightOwl} />
</demo-code>

<script>
  customElements.define(
    'demo-code',
    class extends HTMLElement {
      connectedCallback() {
        const expandButton = this.querySelector('button[aria-expanded]') as HTMLElement;
        const code = this.querySelector('pre') as HTMLElement;

        expandButton?.addEventListener('click', () => {
          const shouldExpand = expandButton.getAttribute('aria-expanded') === 'false';
          expandButton.setAttribute('aria-expanded', String(shouldExpand));
          code.inert = !shouldExpand;
        });
      }
    },
  );
</script>

<style lang='scss'>
  @layer components {
    .demo-box {
      position: relative;
      min-height: 300px;
      max-height: 500px;
      display: grid;
      justify-items: center;
      padding: 1rem;
      background: var(--color-sandbox-gradient);
      isolation: isolate;
      border-radius: var(--border-radius-1);
    }

    .demo-box :global([data-iui-theme]) {
      height: 100%;
      width: 100%;
      overflow: auto;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .sandbox-link {
      position: absolute;
      bottom: 0.25rem;
      right: 0.25rem;
      z-index: 1;
    }

    demo-code {
      isolation: isolate;
      position: relative;
      display: grid;
      border-radius: var(--border-radius-1);
      outline: 1px solid var(--color-line-2);
      outline-offset: 1px;

      > :global(pre) {
        padding: 1rem;
        font-size: var(--type--1);
        border-radius: var(--border-radius-1);
      }

      > :global([aria-expanded='false'] ~ pre) {
        max-height: 200px;
        overflow: hidden !important;

        &::before {
          content: '';
          position: absolute;
          inset: 0;
          z-index: 1;
          background: linear-gradient(to bottom, transparent, var(--color-background-2));
        }
      }

      > :global([aria-expanded='true'] ~ pre) {
        padding-block-end: 2.5rem;
      }

      button {
        font: inherit;
        cursor: pointer;
        background: var(--color-background-1);
        padding: 0.5rem 1.25rem;
        position: absolute;
        border: 1px solid;
        border-radius: var(--border-radius-1);
        z-index: 2;
        transition:
          color 0.2s,
          border-color 0.2s;
      }

      button[aria-expanded] {
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);

        &:not(:hover, :focus-visible) {
          color: var(--color-text);
          border-color: var(--color-line-1);
        }
      }
    }
  }
</style>
