---
import fs from 'node:fs';
import OpenInCodePen from './OpenInCodePen.astro';
import { Code } from 'astro/components';
import { createRequire } from 'node:module';
import itwinuiStyles from '@itwin/itwinui-react/styles.css?url';

const require = createRequire(import.meta.url);

export type Props = {
  /** Name of the file to read code example from, should be located in ~/examples folder */
  src: string;

  /**
   * A flag to determine whether the first code snippet will truncate and turn into an expandable disclosure.
   * @default true
   */
  truncate?: boolean;

  /**
   * A flag to determine whether the demo code should be visible.
   * @default false
   */
  hideCode?: boolean;
};

const { src, truncate = true, hideCode = false } = Astro.props;

const jsxPath = require.resolve(`examples/${src}`);
const cssPath = jsxPath.replace(/\.jsx$/, '.css');

let jsxCode = await fs.promises.readFile(jsxPath, 'utf8');

// strip copyright header (first 4 lines)
if (jsxCode.includes('Copyright (c) Bentley Systems')) {
  jsxCode = jsxCode.split('\n').slice(4).join('\n');
}

const cssCode = await (async () => {
  try {
    return await fs.promises.readFile(cssPath, 'utf8');
  } catch {
    return '';
  }
})();
---

<demo-box>
  <template shadowrootmode='open'>
    <style is:inline>
      astro-island {
        display: block !important; /* https://github.com/iTwin/iTwinUI/pull/2353 */
      }
    </style>
    <style set:html={cssCode}></style>
    <link rel='stylesheet' href={itwinuiStyles} />
    <slot />
    <slot is:inline />
  </template>

  <OpenInCodePen
    class='sandbox-link'
    code={{
      js: jsxCode,
      css: cssCode,
    }}
  />
</demo-box>

{
  !hideCode && (
    <demo-code>
      {truncate && <button aria-expanded='false'>Toggle full code</button>}
      <Code code={jsxCode} lang='tsx' theme={'github-dark'} />
    </demo-code>
  )
}

<script>
  customElements.define(
    'demo-code',
    class extends HTMLElement {
      connectedCallback() {
        const expandButton = this.querySelector('button[aria-expanded]') as HTMLElement;
        const code = this.querySelector('pre') as HTMLElement;

        expandButton?.addEventListener('click', () => {
          const shouldExpand = expandButton.getAttribute('aria-expanded') === 'false';
          expandButton.setAttribute('aria-expanded', String(shouldExpand));
          code.inert = !shouldExpand;
        });
      }
    },
  );

  customElements.define(
    'demo-box',
    class extends HTMLElement {
      connectedCallback() {
        // firefox fallback
        if (!this.shadowRoot) {
          const template = this.querySelector('template');
          if (!template) return;
          this.attachShadow({ mode: 'open' }).appendChild(template.content);
          template.remove();
        }
      }
    },
  );
</script>

<style lang='scss'>
  @layer components {
    demo-box {
      position: relative;
      min-height: 300px;
      max-height: 500px;
      display: grid;
      place-items: center;
      padding: 1rem;
      isolation: isolate;
      border-radius: var(--border-radius-1);
      outline: 1px solid var(--color-line-2);
    }

    .sandbox-link {
      position: absolute;
      bottom: 0.25rem;
      right: 0.25rem;
      z-index: 1;
    }

    demo-code {
      isolation: isolate;
      position: relative;
      display: grid;
      border-radius: var(--border-radius-1);
      outline: 1px solid var(--color-line-2);
      outline-offset: 1px;

      > :global(pre) {
        padding: 1rem;
        font-size: var(--type--1);
        border-radius: var(--border-radius-1);
        background: none !important;
      }

      > :global([aria-expanded='false'] ~ pre) {
        max-height: 200px;
        overflow: hidden !important;
        mask-image: linear-gradient(to bottom, #000, transparent);
      }

      > :global([aria-expanded='true'] ~ pre) {
        padding-block-end: 2.5rem;
        max-height: min(80vh, 600px);
      }

      button {
        font: inherit;
        cursor: pointer;
        background: var(--color-background-1);
        padding: 0.5rem 1.25rem;
        position: absolute;
        border: 1px solid;
        border-radius: var(--border-radius-1);
        z-index: 2;
        transition:
          color 0.2s,
          border-color 0.2s;
      }

      button[aria-expanded] {
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);

        &:not(:hover, :focus-visible) {
          color: var(--color-text);
          border-color: var(--color-line-1);
        }
      }
    }
  }
</style>
