---
import baseUrl from '__dirname';
import fs from 'node:fs';
import path from 'node:path';
import OpenInCodesandbox from './OpenInCodesandbox.astro';
import Code from 'astro/components/Code.astro';
import nightOwl from '../../nightOwl.mjs';
import { ThemeProvider } from '@itwin/itwinui-react';

export type Props = {
  /** name of the file to read code example from, should be located in ~/examples folder */
  src: string;

  /**
   * whether the first code snippet will truncate and turn into an expandable disclosure.
   * @default true
   */
  truncate?: boolean;
};

const { src, truncate = true } = Astro.props;

const codePath = path.join(baseUrl, `./src/examples/${src}`);
let code = await fs.promises.readFile(codePath, 'utf8');

// strip copyright header (first 4 lines)
if (code.includes('Copyright (c) Bentley Systems')) {
  code = code.split('\n').slice(4).join('\n');
}
---

<div class='demo-wrapper'>
  <div class='demo-box'>
    <ThemeProvider
      className='demo-iui-wrapper'
      theme='dark'
      themeOptions={{ applyBackground: false }}
    >
      <slot />
    </ThemeProvider>
    <OpenInCodesandbox class='sandbox-link' code={code} />
  </div>
  <demo-code>
    <details>
      <summary>Code sample</summary>
      <Code code={code} lang='tsx' theme={nightOwl} />
    </details>
    <button data-copied='false'><span class='visually-hidden'>Copy to clipboard</span></button>
  </demo-code>
</div>

<script>
  customElements.define(
    'demo-code',
    class extends HTMLElement {
      connectedCallback() {
        const copyButton = this.querySelector('button[data-copied]') as HTMLElement;
        const code = this.querySelector('pre');

        copyButton?.addEventListener('click', async () => {
          try {
            await navigator.clipboard.writeText(code.innerText);
            copyButton.dataset.copied = 'true';
            copyButton.setAttribute('aria-description', 'Copied');

            await new Promise((resolve) => setTimeout(resolve, 4000));
            copyButton.dataset.copied = 'false';
            copyButton.removeAttribute('aria-description');
          } catch {
            console.error('unable to copy :(');
          }
        });
      }
    }
  );
</script>

<style lang='scss'>
  .demo-wrapper {
    background: var(--color-sandbox-gradient);
    border-radius: var(--border-radius-1);
  }

  .demo-box {
    position: relative;
    min-height: 300px;
    max-height: 400px;
    display: grid;
    justify-items: center;
    padding: 1rem;
    isolation: isolate;
    border-radius: inherit;
  }

  .demo-iui-wrapper {
    height: 100%;
    width: 100%;
    overflow: auto;
    display: grid;
    align-content: center;
    justify-items: center;
  }

  .sandbox-link {
    position: absolute;
    bottom: 0.25rem;
    right: 0.25rem;
    z-index: 1;
  }

  demo-code {
    isolation: isolate;
    position: relative;
    display: grid;

    > details {
      border-radius: 0 0 var(--border-radius-1) var(--border-radius-1);
      border-top: 1px solid var(--color-line-2);

      > summary {
        padding: 1rem;
        cursor: pointer;
        user-select: none;
        color: var(--color-subtext);
        border-radius: inherit;

        &:hover {
          background-color: var(--color-active);
          color: var(--color-text);
        }
      }

      > :global(pre) {
        padding: 1rem;
        font-size: var(--type--1);
        background-color: transparent !important;
      }
    }

    button {
      font: inherit;
      cursor: pointer;
      background: transparent;
      color: var(--color-text);
      position: absolute;
      border: 1px solid transparent;
      border-radius: 999px;
      transition: color 0.2s, border-color 0.2s;
      top: 0.75rem;
      right: 0.25rem;
      padding: calc(0.5rem - 1px);
      display: grid;
      place-items: center;

      --_svg: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path d='m5 10h-2a1 1 0 0 1 -1-1v-7a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v2h1v-2a2 2 0 0 0 -2-2h-5a2 2 0 0 0 -2 2v7a2 2 0 0 0 2 2h2zm8-4a1 1 0 0 1 1 1v7a1 1 0 0 1 -1 1h-5a1 1 0 0 1 -1-1v-7a1 1 0 0 1 1-1zm0-1h-5a2 2 0 0 0 -2 2v7a2 2 0 0 0 2 2h5a2 2 0 0 0 2-2v-7a2 2 0 0 0 -2-2z'></path></svg>");

      &[data-copied='true'] {
        --_svg: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 20 20'><path d='m7.032 13.907l-3.471-3.905a.75.75 0 0 0-1.122.996l4 4.5a.75.75 0 0 0 1.091.032l10.5-10.5a.75.75 0 0 0-1.06-1.06l-9.938 9.937Z'></path></svg>");
      }

      &::before {
        content: '';
        -webkit-mask: var(--_svg) no-repeat center / contain;
        mask: var(--_svg) no-repeat center / contain;
        width: 1rem;
        height: 1rem;
        background-color: currentColor;
      }

      &:hover {
        background-color: hsla(0deg, 0%, 0%, 0.2);
      }
    }

    &:not(:hover, :focus-within) button[data-copied] {
      clip-path: inset(50%);
      overflow: hidden;
      width: 1px;
      height: 1px;
      white-space: nowrap;
    }
  }
</style>
