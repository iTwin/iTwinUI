---
type Props = {
  variant?: 'high-visibility' | 'borderless' | 'cta';
  size?: 'small' | 'large';
  isActive?: boolean;
  dropdown?: boolean;
  idea?: boolean;
} & astroHTML.JSX.ButtonHTMLAttributes;

const { class: className, variant, size, isActive, dropdown, idea, ...props } = Astro.props;
---

<button
  class:list={['iui-button', 'iui-button-base', { 'iui-button-dropdown': dropdown }, className]}
  type='button'
  data-iui-variant={idea ? 'idea' : variant}
  data-iui-size={size}
  data-iui-active={isActive ? 'true' : undefined}
  {...props}
>
  <slot name='start-icon' />
  {
    Astro.slots.has('default') && (
      <span>
        <slot />
      </span>
    )
  }
  <slot name='end-icon' />
</button>

<script>
  const buttonIcons = [
    ...document.querySelectorAll<HTMLInputElement>('[slot="start-icon"]'),
    ...document.querySelectorAll<HTMLInputElement>('[slot="end-icon"]'),
    ...document.querySelectorAll<HTMLInputElement>('.iui-notification-marker'),
  ];
  buttonIcons.forEach((icon) => {
    icon.classList.add('iui-button-icon');
  });
</script>
