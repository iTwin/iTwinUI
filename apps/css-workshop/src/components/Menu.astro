---
type Props = {
  isActive?: boolean;
  checked?: boolean;
  isLarge?: boolean;
  actionable?: boolean;
  disabled?: boolean;
  isSkeleton?: boolean;
  style?: string;
  iconStyle?: string;
  iconClassName?: string;
} & astroHTML.JSX.HTMLAttributes;

const {
  class: className,
  isActive,
  checked,
  isLarge,
  actionable,
  disabled,
  isSkeleton,
  style,
  iconStyle,
  iconClassName,
  ...props
} = Astro.props;
---

<li
  class:list={[
    'iui-list-item',
    { 'iui-active': isActive },
    { 'iui-disabled': disabled },
    { 'iui-large': isLarge },
    { 'iui-menu-item-skeleton': isSkeleton },
    className,
  ]}
  aria-checked={checked}
  data-iui-actionable={actionable ? 'true' : 'false'}
  style={style}
>
  {
    Astro.slots.has('start-icon') && (
      <>
        <span
          class:list={['iui-list-item-icon', iconClassName]}
          style={iconStyle}
          aria-hidden='true'
        >
          <slot name='start-icon' />
        </span>
      </>
    )
  }
  {
    Astro.slots.has('default') && (
      <span class='iui-list-item-content'>
        <slot />
      </span>
    )
  }
  {
    Astro.slots.has('end-icon') && (
      <>
        <span class='iui-list-item-icon' aria-hidden='true'>
          <slot name='end-icon' />
        </span>
      </>
    )
  }
  {
    Astro.slots.has('skeleton-without-icon') && (
      <span class='iui-content'>
        <div class='iui-menu-label iui-skeleton' aria-hidden='true' />
        <div class='iui-visually-hidden'>Loading...</div>
      </span>
    )
  }
  {
    Astro.slots.has('skeleton-with-icon') && (
      <>
        <div class='iui-icon iui-skeleton' aria-hidden='true' />
        <span class='iui-content'>
          <div class='iui-menu-label iui-skeleton' aria-hidden='true' />
          <slot name='skeleton-with-icon' />
          <div class='iui-visually-hidden'>Loading...</div>
        </span>
      </>
    )
  }
</li>
