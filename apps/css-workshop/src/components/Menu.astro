---
type Props = {
  isActive?: boolean;
  isLarge?: boolean;
  disabled?: boolean;
  isSkeleton?: boolean;
  iconStyle?: string;
  iconClassName?: string;
} & astroHTML.JSX.HTMLAttributes;

const {
  class: className,
  isActive,
  isLarge,
  disabled,
  isSkeleton,
  iconStyle,
  iconClassName,
  ...props
} = Astro.props;
---

<li
  class:list={[
    { 'iui-list-item': !isSkeleton },
    { 'iui-menu-item': isSkeleton },
    { 'iui-active': isActive },
    { 'iui-disabled': disabled },
    { 'iui-menu-item-skeleton': isSkeleton },
    { 'iui-large': isLarge },
    className,
  ]}
  data-iui-actionable={isSkeleton ? undefined : 'true'}
  {...props}
>
  {
    Astro.slots.has('start-icon') && (
      <>
        <span
          class:list={['iui-list-item-icon', iconClassName]}
          style={iconStyle}
          aria-hidden='true'
        >
          <slot name='start-icon' />
        </span>
      </>
    )
  }
  {
    Astro.slots.has('default') && (
      <span class={!isSkeleton ? 'iui-list-item-content' : 'iui-content'}>
        <slot />
      </span>
    )
  }
  {
    Astro.slots.has('end-icon') && (
      <>
        <span class='iui-list-item-icon' aria-hidden='true'>
          <slot name='end-icon' />
        </span>
      </>
    )
  }
</li>
